var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.447,1,1.065]],["body/components/AppComponent.html",[0,0.786,1,1.649,2,1.289,3,0.201,4,0.174,5,1.026,6,2.857,7,1.026,8,1.026,9,0.174,10,2.416,11,0.201,12,2.496,13,2.107,14,2.741,15,3.864,16,4.103,17,2.741,18,2.741,19,4.801,20,4.438,21,1.69,22,2.492,23,1.289,24,3.189,25,1.577,26,1.977,27,1.977,28,0.898,29,2.353,30,2.201,31,1.473,32,4.06,33,4.103,34,4.801,35,1.473,36,4.103,37,0.124,38,0.367,39,1.649,40,1.977,41,2.673,42,1.056,43,2.161,44,2.161,45,0.786,46,2.857,47,1.249,48,4.103,49,0.642,50,0.026,51,1.006,52,0.214,53,0.558,54,3.052,55,2.857,56,1.69,57,1.69,58,1.69,59,1.473,60,1.69,61,1.69,62,1.69,63,0.987,64,1.612,65,2.857,66,1.69,67,1.351,68,1.262,69,3.47,70,4.103,71,4.103,72,4.103,73,2.741,74,3.47,75,1.129,76,1.977,77,0.558,78,3.052,79,2.857,80,1.049,81,0.599,82,1.359,83,1.026,84,1.176,85,1.591,86,1.908,87,1.176,88,0.687,89,2.857,90,2.125,91,0.201,92,0.642,93,0.959,94,2.857,95,2.857,96,2.416,97,1.176,98,2.857,99,2.857,100,1.176,101,1.176,102,1.026,103,1.473,104,1.473,105,1.026,106,1.884,107,1.026,108,1.026,109,0.898,110,1.026,111,0.898,112,0.898,113,1.026,114,0.898,115,1.026,116,0.898,117,1.026,118,0.898,119,1.026,120,0.898,121,1.026,122,0.898,123,1.026,124,0.898,125,1.026,126,0.898,127,1.026,128,0.898,129,1.026,130,0.898,131,0.599,132,1.026,133,1.026,134,0.015,135,0.015]],["title/guards/AuthGuard.html",[136,2.521,137,2.521]],["body/guards/AuthGuard.html",[3,0.261,4,0.227,9,0.227,12,1.766,21,2.584,23,1.919,25,1.427,37,0.162,39,1.167,42,1.266,45,1.022,47,1.105,49,0.834,50,0.026,51,0.778,52,0.194,53,0.725,63,1.412,80,1.065,81,0.778,82,3.044,83,1.334,84,2.584,85,2.068,88,0.893,91,0.261,92,0.834,93,1.247,112,1.919,134,0.018,135,0.018,137,3.658,138,3.714,139,3.14,140,6.274,141,3.14,142,3.714,143,3.714,144,4.918,145,4.159,146,3.658,147,4.918,148,4.918,149,4.918,150,1.249,151,4.366,152,4.918,153,6.106,154,2.525,155,6.274,156,4.918,157,5.514,158,4.663,159,1.98,160,4.918,161,1.545,162,2.48,163,1.907,164,2.025,165,3.714,166,3.714,167,3.714,168,3.714]],["title/injectables/AuthService.html",[84,1.396,161,1.065]],["body/injectables/AuthService.html",[2,1.082,3,0.158,4,0.138,9,0.138,11,0.293,12,1.073,21,2.186,23,1.952,37,0.098,38,0.308,39,1.735,42,0.886,45,0.621,47,1.311,49,0.939,50,0.026,51,0.875,52,0.244,53,0.815,63,1.477,64,1.157,67,1.203,68,0.829,73,2.301,74,2.913,75,0.948,77,0.983,80,1.002,81,0.473,82,2.627,83,0.81,84,1.418,88,0.543,91,0.158,92,0.507,93,0.758,112,1.082,134,0.013,135,0.013,150,1.162,154,2.726,159,1.237,161,1.082,162,1.507,163,1.158,164,2.074,169,1.158,170,1.908,171,1.918,172,2.092,173,2.092,174,3.478,175,4.489,176,3.444,177,3.444,178,3.314,179,3.444,180,1.157,181,2.092,182,2.955,183,2.092,184,4.676,185,2.092,186,3.444,187,3.108,188,3.444,189,3.123,190,3.444,191,5.953,192,3.478,193,5.309,194,3.444,195,4.489,196,4.178,197,4.178,198,2.79,199,4.676,200,4.676,201,4.676,202,2.726,203,2.301,204,2.256,205,3.444,206,3.478,207,2.256,208,3.444,209,2.839,210,3.444,211,3.444,212,2.256,213,3.444,214,3.444,215,2.913,216,3.444,217,4.489,218,2.256,219,3.123,220,2.913,221,3.444,222,2.839,223,2.256,224,3.444,225,3.444,226,2.562,227,4.676,228,2.401,229,2.562,230,1.324,231,1.638,232,2.913,233,2.256,234,3.444,235,3.444,236,3.444,237,3.444,238,3.444,239,3.353,240,2.256,241,3.444,242,3.444,243,1.418,244,3.444,245,3.444,246,2.256,247,2.301,248,2.301,249,2.092,250,1.918,251,2.301,252,1.256,253,1.908,254,1.908,255,1.507,256,2.256,257,2.256,258,0.621,259,2.256,260,3.444,261,2.092,262,3.444,263,3.444,264,1.237,265,3.444,266,2.256,267,2.256,268,2.256,269,2.256,270,3.444,271,2.256,272,2.256,273,2.256,274,2.256,275,2.256,276,2.256]],["title/interfaces/Comment.html",[277,0.409,278,1.612]],["body/interfaces/Comment.html",[3,0.284,4,0.247,9,0.247,11,0.284,13,2.669,37,0.176,38,0.465,50,0.026,52,0.327,77,1.121,80,0.733,91,0.284,131,1.204,134,0.019,135,0.019,150,1.014,230,1.997,277,0.488,278,3.205,279,1.27,280,3.418,281,3.156,282,5.198,283,5.198,284,2.472,285,3.866,286,3.205,287,3.297,288,4.667,289,1.845,290,6.274,291,3.837,292,2.306,293,3.007,294,3.493,295,2.251,296,4.042,297,3.007,298,3.007,299,4.042,300,4.042,301,3.007]],["title/interfaces/CommentRequest.html",[277,0.409,302,2.058]],["body/interfaces/CommentRequest.html",[3,0.34,4,0.295,9,0.295,11,0.34,37,0.211,38,0.52,50,0.025,52,0.252,67,1.245,77,1.216,91,0.34,131,1.218,134,0.022,135,0.022,146,3.598,174,3.598,228,2.484,230,1.859,243,1.992,264,1.737,277,0.702,278,2.764,279,1.52,286,2.301,287,3.394,302,3.529,303,4.09,304,4.09,305,3.23,306,2.138,307,2.693,308,3.23,309,4.837,310,4.837,311,2.693,312,4.837,313,4.837]],["title/components/CreatepostComponent.html",[0,0.447,109,1.065]],["body/components/CreatepostComponent.html",[0,0.625,1,0.622,2,0.978,3,0.139,4,0.121,5,0.711,7,0.711,8,0.711,9,0.121,11,0.139,23,1.208,25,1.196,26,1.584,27,1.584,28,0.622,29,2.194,30,2.052,31,1.117,35,1.117,37,0.086,38,0.278,39,1.804,40,1.584,41,1.102,42,0.801,43,1.795,44,1.795,45,0.545,47,1.225,49,0.445,50,0.026,51,0.806,52,0.201,53,0.386,56,1.282,57,1.282,58,1.282,59,1.117,60,1.282,61,1.282,62,1.282,63,1.049,64,1.69,66,1.282,67,1.477,68,0.749,75,0.856,76,1.584,80,1.12,81,0.415,82,2.504,83,0.711,87,0.815,88,0.476,91,0.139,92,0.445,93,0.665,97,0.815,100,0.815,101,0.815,102,0.711,103,1.117,104,1.117,105,0.711,106,1.566,107,0.711,108,0.711,109,1.37,110,0.711,111,0.622,112,0.622,113,0.711,114,0.622,115,0.711,116,0.622,117,0.711,118,0.622,119,0.711,120,0.622,121,0.711,122,0.622,123,0.711,124,0.622,125,0.711,126,0.622,127,0.711,128,0.622,129,0.711,130,0.622,131,1.175,132,0.711,133,0.711,134,0.012,135,0.012,150,0.982,159,1.117,164,0.815,180,1.69,182,1.102,252,1.102,254,1.674,258,0.545,264,1.117,287,1.016,311,1.102,314,1.674,315,1.282,316,2.648,317,2.632,318,3.123,319,1.89,320,3.112,321,1.768,322,2.315,323,3.123,324,2.648,325,2.079,326,2.079,327,2.878,328,2.079,329,2.912,330,3.361,331,2.632,332,1.89,333,3.112,334,2.632,335,2.569,336,2.569,337,3.252,338,2.335,339,2.335,340,2.335,341,3.846,342,2.335,343,3.112,344,1.196,345,3.112,346,5.265,347,2.639,348,3.243,349,2.648,350,1.979,351,3.056,352,2.861,353,3.112,354,1.979,355,2.648,356,2.648,357,1.979,358,1.979,359,1.979,360,2.632,361,1.89,362,3.112,363,1.979,364,2.632,365,1.979,366,0.761,367,1.202,368,1.102,369,1.979,370,1.202,371,1.016,372,1.202,373,1.979,374,1.322,375,1.322,376,2.648,377,1.979,378,1.322,379,1.674,380,1.472,381,1.472,382,1.979,383,1.979,384,1.202,385,1.979,386,1.979,387,0.875,388,0.941,389,1.979,390,1.674,391,1.674,392,1.674,393,2.079,394,2.079,395,2.079,396,1.472,397,1.016,398,1.472,399,1.322,400,3.056,401,1.322,402,1.472,403,3.252,404,1.979,405,1.472,406,1.674,407,2.335,408,1.979,409,1.979,410,2.079,411,3.687,412,3.687,413,3.112,414,1.674,415,3.112,416,3.112,417,1.89,418,1.598,419,2.632,420,3.112,421,2.632,422,3.112,423,1.979]],["title/components/GreetingComponent.html",[0,0.447,111,1.065]],["body/components/GreetingComponent.html",[0,0.777,1,0.863,2,1.253,3,0.193,4,0.168,5,0.986,7,0.986,8,0.986,9,0.168,11,0.193,13,2.048,14,2.664,21,1.131,25,1.533,26,1.934,27,1.934,28,0.863,29,2.338,30,2.186,31,1.432,35,1.432,37,0.12,38,0.357,39,1.619,40,1.934,42,1.026,43,2.122,44,2.122,45,0.756,47,1.229,49,0.617,50,0.026,51,0.984,52,0.143,53,0.536,56,1.642,57,1.642,58,1.642,59,1.432,60,1.642,61,1.642,62,1.642,63,0.959,64,1.73,66,1.642,67,1.026,68,0.959,73,2.664,75,1.097,76,1.934,78,2.967,80,0.935,81,0.576,82,2.925,83,0.986,84,2.351,87,1.131,88,0.661,90,2.043,91,0.193,92,0.617,93,0.922,97,1.131,100,1.131,101,1.131,102,0.986,103,1.432,104,1.432,105,0.986,106,1.85,107,0.986,108,0.986,109,0.863,110,0.986,111,1.619,112,1.933,113,0.986,114,0.863,115,0.986,116,0.863,117,0.986,118,0.863,119,0.986,120,0.863,121,0.986,122,0.863,123,0.986,124,0.863,125,0.986,126,0.863,127,0.986,128,0.863,129,0.986,130,0.863,131,0.576,132,0.986,133,0.986,134,0.015,135,0.015,141,2.323,150,0.778,154,2.048,159,2.05,178,2.22,203,2.664,220,3.372,315,1.642,344,1.533,387,2.076,388,1.306,396,2.043,397,1.41,424,4.827,425,4.827,426,2.323,427,3.372,428,3.988,429,2.967,430,2.048,431,3.988,432,2.411,433,3.988,434,3.988,435,5.472,436,3.988,437,2.747,438,2.747,439,3.988,440,2.747,441,2.747,442,2.747,443,2.747,444,2.664,445,3.372,446,2.323,447,3.988,448,2.664,449,2.323]],["title/components/LayoutComponent.html",[0,0.447,114,1.065]],["body/components/LayoutComponent.html",[0,0.722,1,0.691,2,1.061,3,0.154,4,0.134,5,1.477,7,0.79,8,0.79,9,0.134,11,0.154,13,1.734,14,3.51,15,1.469,21,1.391,22,3.517,23,0.691,24,2.9,25,1.298,26,1.693,27,1.693,28,0.691,29,2.243,30,2.098,31,1.213,32,3.477,35,1.213,37,0.096,38,0.302,39,1.564,40,1.693,41,2.29,42,0.869,43,1.9,44,1.9,45,0.605,47,1.328,49,0.494,50,0.026,51,0.862,52,0.215,53,0.429,56,1.391,57,1.391,58,1.391,59,1.213,60,1.391,61,1.391,62,1.391,63,1.11,64,1.672,66,1.391,67,0.869,68,1.11,73,2.256,75,1.27,76,1.693,77,0.429,80,1.091,81,0.461,82,2.755,83,0.79,84,2.385,85,1.224,86,1.469,87,0.906,88,0.529,90,1.636,91,0.154,92,0.494,93,0.739,97,0.906,100,0.906,101,0.906,102,0.79,103,1.213,104,1.213,105,0.79,106,1.657,107,0.79,108,0.79,109,0.691,110,0.79,111,0.691,112,1.292,113,0.79,114,1.45,115,0.79,116,0.691,117,0.79,118,0.691,119,0.79,120,0.691,121,0.79,122,0.691,123,0.79,124,0.691,125,0.79,126,0.691,127,0.79,128,0.691,129,0.79,130,0.691,131,0.461,132,0.79,133,0.79,134,0.013,135,0.013,150,0.659,154,2.112,158,2.856,159,1.213,195,5.161,284,2.195,344,1.298,366,0.845,371,1.129,429,2.513,432,2.556,444,3.082,450,1.86,451,3.378,452,4.614,453,4.614,454,2.513,455,2.29,456,3.378,457,2.856,458,3.378,459,3.378,460,2.856,461,3.378,462,2.051,463,4.112,464,4.978,465,4.112,466,4.112,467,3.477,468,3.477,469,4.112,470,4.112,471,4.112,472,3.378,473,3.378,474,4.978,475,5.472,476,4.614,477,1.636,478,3.378,479,2.199,480,2.199,481,2.199,482,2.199,483,2.856,484,2.199,485,2.199,486,2.199,487,3.378,488,2.199,489,2.856,490,3.378,491,2.199,492,2.199,493,1.86,494,2.199,495,2.199,496,1.636,497,1.636,498,1.636,499,2.513,500,2.199,501,4.112,502,2.199,503,2.199,504,2.199,505,4.614,506,4.614,507,4.614]],["title/components/LoginComponent.html",[0,0.447,116,1.065]],["body/components/LoginComponent.html",[0,0.643,1,0.66,2,1.024,3,0.148,4,0.128,5,0.754,7,0.754,8,0.754,9,0.128,11,0.148,13,1.674,14,1.403,15,1.403,18,2.177,21,1.645,22,2.96,24,2.649,25,1.253,26,1.645,27,1.645,28,0.66,29,2.222,30,2.078,31,1.171,35,1.171,37,0.091,38,0.292,39,1.795,40,1.645,42,0.839,43,1.854,44,1.854,45,0.578,47,1.283,49,0.472,50,0.026,51,0.837,52,0.17,53,0.41,54,2.425,56,1.342,57,1.854,58,1.342,59,1.171,60,1.342,61,1.342,62,1.342,63,1.083,64,1.732,66,1.342,67,0.839,68,0.961,75,1.099,76,1.645,80,1.095,81,0.44,82,2.56,83,0.754,84,2.404,85,1.169,86,1.403,87,0.865,88,0.505,91,0.148,92,0.472,93,0.705,97,1.342,100,0.865,101,0.865,102,0.754,103,1.171,104,1.171,105,0.754,106,1.617,107,0.754,108,0.754,109,0.66,110,0.754,111,0.66,112,0.66,113,0.754,114,0.66,115,0.754,116,1.415,117,0.754,118,0.66,119,0.754,120,0.66,121,0.754,122,0.66,123,0.754,124,0.66,125,0.754,126,0.66,127,0.754,128,0.66,129,0.754,130,0.66,131,0.44,132,0.754,133,0.754,134,0.012,135,0.012,150,0.879,154,2.312,159,1.435,178,3.445,180,1.095,202,2.052,222,2.426,230,1.535,231,1.9,253,1.776,258,0.897,264,1.171,285,1.563,311,1.169,315,1.342,316,2.734,324,2.734,325,2.177,326,2.669,327,2.96,328,2.177,329,2.177,335,2.669,338,2.426,340,2.426,342,2.426,344,1.253,348,3.35,349,2.734,351,3.269,355,2.734,356,3.133,361,1.98,366,0.807,367,1.276,368,1.169,370,1.276,371,1.079,372,1.276,381,1.563,384,1.276,387,0.929,388,0.999,396,1.563,397,1.079,400,2.734,405,1.563,407,1.98,410,3.008,418,1.674,432,2.052,444,3.008,445,3.808,455,1.169,467,3.378,477,1.563,496,1.563,497,1.563,498,1.563,499,1.563,508,1.776,509,3.26,510,2.757,511,3.26,512,3.26,513,4.875,514,3.378,515,3.26,516,2.101,517,2.101,518,2.101,519,2.757,520,2.757,521,2.101,522,3.26,523,2.101,524,2.101,525,2.101,526,2.101,527,2.101,528,2.101,529,1.403,530,2.101,531,2.101,532,2.101,533,2.757,534,2.757,535,3.26,536,2.757,537,2.101,538,2.425,539,2.425,540,2.101]],["title/interfaces/LoginRequest.html",[222,2.058,277,0.409]],["body/interfaces/LoginRequest.html",[3,0.343,4,0.298,9,0.298,11,0.343,37,0.213,38,0.523,50,0.025,52,0.305,77,1.313,91,0.343,134,0.022,135,0.022,150,0.953,178,2.72,222,3.55,228,2.509,230,2.492,231,3.084,243,2.012,264,1.754,277,0.706,279,1.535,305,3.263,306,2.16,307,2.72,308,3.263,541,4.131,542,4.886]],["title/interfaces/LoginResponse.html",[255,2.264,277,0.409]],["body/interfaces/LoginResponse.html",[3,0.348,4,0.302,9,0.302,11,0.348,37,0.215,38,0.527,50,0.025,52,0.307,77,1.228,91,0.348,134,0.022,135,0.022,174,3.681,178,2.755,192,4.844,206,3.681,232,4.185,243,2.038,255,3.935,264,1.777,277,0.711,279,1.555,284,2.354,306,2.188,543,4.185,544,3.935,545,4.949,546,4.185,547,4.949]],["title/components/MeComponent.html",[0,0.447,118,1.065]],["body/components/MeComponent.html",[0,0.668,1,0.562,2,0.903,3,0.126,4,0.109,5,0.642,7,0.642,8,0.642,9,0.109,11,0.126,17,2.751,21,1.183,23,1.131,25,1.104,26,1.482,27,1.482,28,0.562,29,2.144,30,2.005,31,1.031,35,1.031,37,0.078,38,0.257,39,1.788,40,1.482,42,0.739,43,1.696,44,1.696,45,0.79,47,1.278,49,0.645,50,0.026,51,0.863,52,0.251,53,0.56,56,1.183,57,1.183,58,1.183,59,1.889,60,1.183,61,1.183,62,1.183,63,1.085,64,1.699,66,1.183,67,0.739,68,0.866,75,0.99,76,1.482,77,0.56,80,1.108,81,0.375,84,0.737,85,0.996,87,0.737,88,0.43,91,0.126,92,0.402,97,1.482,100,0.737,101,0.737,102,0.642,103,1.031,104,1.031,105,0.642,106,1.479,107,0.642,108,0.642,109,0.562,110,0.642,111,0.562,112,0.562,113,0.642,114,0.562,115,0.642,116,0.562,117,0.642,118,1.294,119,0.642,120,0.562,121,0.642,122,0.562,123,0.642,124,0.562,125,0.642,126,0.562,127,0.642,128,1.294,129,0.642,130,0.562,131,0.375,132,0.642,133,0.642,134,0.011,135,0.011,150,1.131,159,1.031,162,1.195,164,0.737,180,1.383,209,3.195,231,2.145,258,0.492,284,1.959,289,0.845,292,1.292,307,0.996,311,0.996,315,1.183,318,2.817,319,1.744,321,1.823,322,2.137,324,1.744,327,2.185,330,2.751,335,2.403,338,2.185,339,2.185,340,2.185,342,2.185,344,1.104,347,2.817,349,2.501,351,2.501,356,1.744,361,1.744,366,0.688,367,1.087,368,0.996,370,1.087,371,0.919,372,1.087,374,1.195,375,1.195,378,1.195,380,1.331,387,1.591,388,1.712,391,1.513,392,1.513,393,2.403,394,2.403,395,2.403,397,2.115,399,1.918,400,2.739,401,1.918,407,1.744,417,1.744,418,1.475,510,2.429,529,2.403,538,2.137,539,2.137,548,1.513,549,2.137,550,1.744,551,2.872,552,2.511,553,2.739,554,4.119,555,2.872,556,2.872,557,3.514,558,3.483,559,3.064,560,3.022,561,3.216,562,3.043,563,2.872,564,2.872,565,3.598,566,4.511,567,4.119,568,1.789,569,3.043,570,3.598,571,2.872,572,1.789,573,1.789,574,1.789,575,2.872,576,1.789,577,3.064,578,1.599,579,2.872,580,1.789,581,1.513,582,1.789,583,1.789,584,1.789,585,1.789,586,2.003,587,1.789,588,1.789,589,1.513,590,1.789,591,1.331,592,1.789,593,1.789,594,1.513,595,1.789,596,1.513,597,1.789,598,1.513,599,2.872,600,1.789,601,1.195,602,1.789,603,1.789,604,1.789,605,1.513,606,1.789,607,2.872,608,1.789,609,1.789,610,1.789,611,2.872,612,1.789,613,2.872,614,2.872,615,1.789,616,1.513,617,3.598,618,1.513,619,1.789,620,1.513,621,1.789,622,1.789,623,1.513,624,1.789,625,1.789,626,1.789,627,2.872,628,2.872,629,1.789]],["title/interfaces/Post.html",[131,0.71,277,0.409]],["body/interfaces/Post.html",[3,0.307,4,0.19,9,0.19,11,0.219,28,0.979,37,0.136,38,0.39,41,3.314,49,0.7,50,0.026,52,0.319,53,1.253,77,1.253,80,0.914,91,0.307,131,1.383,134,0.016,135,0.016,159,1.567,189,2.082,230,1.198,258,0.858,277,0.527,278,2.595,279,0.979,281,2.65,286,3.054,287,3.254,288,4.273,289,1.797,292,2.24,293,2.319,294,3.613,295,1.735,297,2.319,298,2.319,301,2.319,306,1.378,321,2.156,332,1.893,430,1.6,448,2.082,544,2.915,630,2.319,631,3.691,632,4.259,633,4.259,634,3.787,635,3.691,636,3.691,637,4.259,638,3.691,639,3.747,640,3.691,641,2.636,642,2.636,643,2.636,644,2.319,645,2.636,646,2.636,647,2.636,648,2.636,649,2.636,650,3.691,651,2.636,652,2.636,653,2.636,654,2.636,655,2.636,656,2.636,657,4.259,658,2.636,659,2.636,660,2.636,661,2.636,662,2.636,663,2.636,664,2.636,665,3.691,666,3.691,667,3.691,668,3.691,669,1.893]],["title/components/PostComponent.html",[0,0.447,120,1.065]],["body/components/PostComponent.html",[0,0.787,1,1.089,2,1.475,3,0.243,4,0.212,5,1.244,7,1.244,8,1.244,9,0.212,11,0.374,28,1.089,29,2.423,30,2.266,31,1.686,35,1.686,37,0.151,47,0.779,50,0.026,51,0.984,52,0.181,68,1.13,80,1.082,81,0.726,83,1.244,91,0.243,92,0.779,102,1.244,103,1.686,104,1.686,105,1.244,106,2.05,107,1.244,108,1.244,109,1.089,110,1.244,111,1.089,112,1.089,113,1.244,114,1.089,115,1.244,116,1.089,117,1.244,118,1.089,119,1.244,120,1.794,121,1.244,122,1.089,123,1.244,124,1.673,125,1.244,126,1.089,127,1.244,128,1.089,129,1.244,130,1.089,131,1.406,132,1.244,133,1.244,134,0.017,135,0.017,258,0.954,291,3.136,315,1.933,316,2.851,344,1.804,366,1.332,432,2.734,670,2.931,671,3.97,672,4.246,673,3.97,674,3.234,675,3.961,676,4.696,677,4.696,678,3.97,679,3.466,680,2.105,681,2.931,682,3.97,683,3.97,684,3.97,685,3.97,686,3.97]],["title/components/PostDetailsComponent.html",[0,0.447,122,1.065]],["body/components/PostDetailsComponent.html",[0,0.631,1,0.633,2,0.992,3,0.141,4,0.123,5,0.723,7,0.723,8,0.723,9,0.123,11,0.141,23,1.222,25,1.213,26,1.602,27,1.602,28,0.633,29,2.202,30,2.06,31,1.133,35,1.133,37,0.088,38,0.282,39,1.593,40,1.602,42,0.812,43,1.813,44,1.813,45,0.554,47,1.232,49,0.453,50,0.026,51,0.815,52,0.23,53,0.393,56,1.299,57,1.299,58,2.088,59,1.133,60,1.299,61,1.299,62,1.299,63,0.936,64,1.605,66,1.299,67,1.133,68,0.759,75,0.554,76,1.602,77,0.616,80,1.135,81,0.422,83,0.723,87,0.83,88,0.485,91,0.141,92,0.453,93,0.677,97,1.602,100,0.83,101,0.83,102,0.723,103,1.133,104,1.133,105,0.723,106,1.581,107,0.723,108,0.723,109,0.633,110,0.723,111,0.633,112,0.633,113,0.723,114,0.633,115,0.723,116,0.633,117,0.723,118,0.633,119,0.723,120,0.633,121,0.723,122,1.383,123,0.723,124,0.633,125,0.723,126,0.633,127,0.723,128,0.633,129,0.723,130,0.633,131,1.341,132,0.723,133,0.723,134,0.012,135,0.012,146,3.942,180,1.478,209,1.916,229,2.347,258,0.554,261,1.916,278,2.61,285,2.347,287,1.998,289,1.491,291,2.108,302,2.903,311,1.122,315,1.299,323,3.054,324,1.916,325,2.108,326,2.108,327,2.903,328,2.108,329,2.108,330,2.94,336,2.598,338,2.362,339,2.362,340,2.362,342,2.362,344,1.213,349,2.673,351,2.673,352,2.894,355,1.916,356,3.079,361,1.916,366,0.774,367,1.223,368,1.122,370,1.223,371,1.034,372,1.223,374,1.346,375,1.346,379,1.704,384,1.223,387,0.891,388,0.958,393,1.346,394,1.346,395,1.346,397,1.034,398,1.499,399,1.346,400,1.916,401,1.346,402,1.499,403,2.668,407,1.223,410,2.108,417,1.916,418,1.62,421,1.704,432,1.998,493,1.704,562,3.289,569,3.289,589,1.704,594,1.704,596,1.704,634,2.673,639,2.347,674,2.362,675,2.894,680,1.223,681,1.704,682,2.668,683,2.668,684,2.668,685,2.668,686,2.668,687,1.704,688,5.07,689,2.347,690,3.156,691,2.894,692,3.89,693,3.156,694,3.156,695,3.89,696,3.89,697,1.704,698,3.156,699,2.015,700,2.015,701,2.015,702,3.156,703,2.015,704,2.015,705,2.015,706,2.015,707,1.499,708,3.89,709,2.015,710,3.156,711,3.156,712,2.015,713,2.015,714,2.015,715,2.015,716,3.156,717,3.156,718,3.156,719,3.156,720,3.156,721,3.156,722,2.015,723,3.156,724,3.156,725,3.156,726,3.156,727,2.015]],["title/interfaces/PostRequest.html",[277,0.409,376,2.058]],["body/interfaces/PostRequest.html",[3,0.334,4,0.29,9,0.29,11,0.334,37,0.207,38,0.514,41,3.577,50,0.025,52,0.323,67,1.223,77,1.305,91,0.334,131,1.205,134,0.021,135,0.021,228,2.441,243,1.957,264,1.707,277,0.694,279,1.493,287,3.299,292,2.22,304,4.019,305,3.174,306,2.101,307,2.646,308,3.174,332,2.886,376,3.492,581,5.433,728,4.019]],["title/interfaces/PostResponse.html",[277,0.409,669,2.058]],["body/interfaces/PostResponse.html",[3,0.318,4,0.2,9,0.2,11,0.231,28,1.421,37,0.143,38,0.405,41,2.882,49,0.737,50,0.026,52,0.291,53,0.883,77,1.089,80,0.939,91,0.318,131,1.403,134,0.017,135,0.017,159,1.624,189,2.192,230,1.261,258,0.903,277,0.546,278,2.152,279,1.031,281,1.993,286,2.784,287,3.331,288,3.365,289,1.522,292,2.33,293,2.441,294,3.648,295,1.827,297,2.441,298,2.441,301,2.441,306,2,321,1.965,332,1.993,430,1.685,448,2.192,544,3.727,630,2.441,631,2.775,632,3.825,633,3.825,634,3.388,635,2.775,636,2.775,637,3.825,638,2.775,639,3.365,640,2.775,641,2.775,642,2.775,643,2.775,644,2.441,645,2.775,646,2.775,647,2.775,648,2.775,649,2.775,650,3.825,651,2.775,652,2.775,653,3.825,654,3.825,655,3.825,656,3.825,657,5.242,658,3.825,659,3.825,660,2.775,661,2.775,662,2.775,663,2.775,664,2.775,665,4.949,666,3.825,667,3.825,668,4.949,669,2.747]],["title/injectables/PostService.html",[161,1.065,323,1.887]],["body/injectables/PostService.html",[3,0.196,4,0.17,9,0.17,11,0.364,12,1.325,23,1.994,37,0.121,38,0.36,39,1.488,42,1.037,45,0.767,47,1.289,49,1.165,50,0.026,51,1.087,52,0.287,53,1.012,63,1.457,64,1.353,67,1.559,68,0.67,75,0.767,77,1.154,80,1.041,81,0.584,88,0.67,91,0.196,92,0.626,93,0.936,131,1.433,134,0.015,135,0.015,161,1.266,163,1.431,164,2.136,169,1.431,171,2.244,172,2.447,173,2.447,180,1.353,181,2.447,182,3.372,183,2.447,185,2.447,198,3.162,202,2.946,209,2.875,219,2.692,226,2.998,230,1.549,247,2.692,248,2.692,249,2.447,250,2.888,251,2.692,252,1.551,258,0.767,261,3.15,278,2.729,289,1.781,302,3.748,317,3.408,323,2.244,332,2.447,334,3.408,360,3.408,376,3.592,430,2.664,462,2.447,550,2.447,601,2.692,634,2.447,669,2.875,689,2.998,729,2.356,730,5.188,731,4.03,732,4.03,733,1.861,734,4.03,735,4.03,736,2.787,737,4.387,738,2.787,739,4.03,740,2.787,741,4.03,742,2.787,743,4.03,744,2.787,745,2.787,746,2.787,747,2.356,748,2.787,749,2.787,750,2.787]],["title/components/PostsComponent.html",[0,0.447,124,1.065]],["body/components/PostsComponent.html",[0,0.695,1,0.624,2,0.98,3,0.139,4,0.121,5,0.713,7,0.713,8,0.713,9,0.121,11,0.139,21,1.285,23,2.005,25,1.199,26,1.587,27,1.587,28,0.624,29,2.195,30,2.053,31,1.12,35,1.12,37,0.086,38,0.279,39,1.715,40,1.587,42,0.803,43,1.798,44,1.798,45,0.858,47,1.291,49,0.446,50,0.026,51,0.807,52,0.228,53,0.387,56,1.285,57,1.285,58,1.285,59,2.063,60,1.285,61,1.285,62,1.285,63,1.051,64,1.692,66,1.285,67,1.445,68,0.75,75,0.858,76,1.587,80,1.08,81,0.416,83,0.713,87,0.818,88,0.478,91,0.139,92,0.446,97,0.818,100,0.818,101,0.818,102,0.713,103,1.12,104,1.12,105,0.713,106,1.568,107,0.713,108,0.713,109,0.624,110,0.713,111,0.624,112,0.624,113,0.713,114,0.624,115,0.713,116,0.624,117,0.713,118,0.624,119,0.713,120,1.372,121,0.713,122,0.624,123,0.713,124,1.372,125,0.713,126,0.624,127,0.713,128,0.624,129,0.713,130,0.624,131,1.144,132,0.713,133,0.713,134,0.012,135,0.012,150,1.065,159,1.12,162,1.326,164,1.798,180,1.467,187,1.477,249,2.652,258,0.546,286,1.484,289,0.917,291,2.084,315,1.285,319,2.652,321,1.833,323,3.039,336,2.574,337,3.259,339,2.34,344,1.199,347,2.432,355,2.652,366,0.763,371,1.019,384,2.652,411,2.638,412,2.638,414,2.638,417,1.894,418,1.602,427,3.693,430,3.101,432,2.438,455,1.737,549,2.321,560,3.126,578,1.105,591,1.477,620,1.679,672,1.477,674,2.34,675,1.477,680,1.206,691,2.867,697,1.679,707,1.477,751,1.679,752,3.748,753,4.747,754,3.12,755,3.12,756,3.12,757,3.12,758,3.12,759,3.12,760,4.747,761,4.747,762,4.367,763,4.367,764,3.12,765,1.985,766,3.12,767,4.367,768,3.12,769,1.985,770,1.985,771,1.985,772,3.12,773,3.12,774,3.12,775,3.12,776,3.12,777,3.12,778,1.985,779,1.985,780,1.985,781,1.985,782,3.12,783,1.985,784,1.985,785,1.985,786,1.985,787,1.985,788,3.12,789,1.985,790,3.12,791,1.985,792,1.985,793,1.985,794,3.12,795,1.985,796,1.985,797,1.985,798,1.985,799,1.985,800,1.985,801,1.985,802,1.985,803,1.985,804,1.985,805,3.854,806,1.985,807,3.854,808,1.985,809,3.854,810,3.12,811,3.12,812,3.12,813,3.12]],["title/components/RegisterComponent.html",[0,0.447,126,1.065]],["body/components/RegisterComponent.html",[0,0.634,1,0.64,2,1.001,3,0.143,4,0.124,5,0.732,7,0.732,8,0.732,9,0.124,11,0.143,13,1.635,15,1.361,18,2.127,21,1.311,22,2.919,24,2.616,25,1.224,26,1.614,27,1.614,28,0.64,29,2.208,30,2.065,31,1.143,35,1.143,37,0.089,38,0.285,39,1.819,40,1.614,42,0.82,43,1.824,44,1.824,45,0.561,47,1.272,49,0.458,50,0.026,51,0.821,52,0.166,53,0.398,54,2.369,56,1.311,57,1.824,58,1.311,59,1.143,60,1.311,61,1.311,62,1.311,63,1.066,64,1.711,66,1.311,67,1.14,68,0.943,75,1.078,76,1.614,80,1.127,81,0.667,82,2.532,83,0.732,84,2.331,85,1.135,86,1.361,87,0.839,88,0.49,91,0.143,92,0.458,93,0.684,97,1.311,100,0.839,101,0.839,102,0.732,103,1.143,104,1.143,105,0.732,106,1.591,107,0.732,108,0.732,109,0.64,110,0.732,111,0.64,112,0.64,113,0.732,114,0.64,115,0.732,116,0.64,117,0.732,118,0.64,119,0.732,120,0.64,121,0.732,122,0.64,123,0.732,124,0.64,125,0.732,126,1.392,127,0.732,128,0.64,129,0.732,130,0.64,131,0.427,132,0.732,133,0.732,134,0.012,135,0.012,150,0.865,154,1.635,159,1.143,164,0.839,175,2.693,178,1.773,180,1.488,202,2.012,203,3.679,231,0.969,239,2.38,258,0.561,264,1.143,311,1.135,315,1.311,316,1.934,324,2.69,325,2.127,326,2.127,327,2.919,328,2.127,329,2.959,330,3.403,331,2.693,335,2.618,338,2.38,339,2.38,340,2.38,342,2.38,344,1.224,348,3.296,349,2.69,351,3.232,352,2.915,355,2.69,356,2.69,361,1.934,366,0.783,367,1.238,368,1.135,370,1.238,371,1.047,372,1.238,374,1.361,375,1.361,381,1.516,384,1.238,387,0.901,388,0.969,390,1.723,393,2.127,394,2.127,395,2.127,397,2.012,398,1.516,399,1.361,400,2.38,401,1.361,402,1.516,405,1.516,407,2.38,410,2.959,418,1.635,432,2.012,446,1.723,449,1.723,455,1.135,477,1.516,496,1.516,497,1.516,498,1.516,499,1.516,514,3.314,519,2.693,520,2.693,529,1.361,533,2.693,534,2.693,536,2.693,538,2.369,539,2.369,552,1.135,553,1.238,598,1.723,616,1.723,814,1.723,815,3.184,816,3.184,817,4.806,818,3.184,819,2.038,820,2.038,821,2.038,822,2.038,823,3.184,824,3.184,825,2.038,826,2.038,827,2.038,828,2.038,829,2.038,830,2.038,831,2.038,832,2.038,833,2.038,834,2.038,835,2.038,836,2.038,837,2.038,838,2.038,839,3.184,840,3.184,841,3.184]],["title/interfaces/RegisterRequest.html",[239,2.058,277,0.409]],["body/interfaces/RegisterRequest.html",[3,0.335,4,0.292,9,0.292,11,0.335,37,0.208,38,0.516,50,0.025,52,0.323,77,1.342,91,0.335,134,0.021,135,0.021,150,0.932,203,3.19,228,2.453,231,3.061,239,3.502,243,1.967,264,1.715,277,0.696,279,1.501,305,3.19,306,2.111,307,2.659,308,3.19,552,3.583,553,3.908,842,4.039,843,4.777]],["title/injectables/ScreenService.html",[24,1.741,161,1.065]],["body/injectables/ScreenService.html",[0,0.718,3,0.305,4,0.265,9,0.265,11,0.305,12,2.066,18,4.159,21,2.24,22,3.607,24,2.794,37,0.189,38,0.487,47,0.976,50,0.026,67,1.4,68,1.045,75,1.195,80,0.987,81,0.91,88,1.045,91,0.305,92,0.976,96,4.601,134,0.02,135,0.02,154,2.794,161,1.71,163,2.231,169,2.231,171,3.029,187,3.231,202,3.05,217,4.601,219,3.634,284,2.962,457,5.265,844,3.673,845,5.441,846,6.227,847,5.441,848,4.601,849,5.441,850,5.441,851,4.344,852,5.441]],["title/interfaces/Subscription.html",[277,0.409,578,1.887]],["body/interfaces/Subscription.html",[3,0.322,4,0.28,9,0.28,11,0.322,37,0.2,38,0.503,50,0.025,52,0.331,59,1.646,77,1.187,91,0.322,134,0.021,135,0.021,150,0.894,243,2.316,250,2.551,277,0.553,279,1.44,289,1.866,292,2.453,306,2.026,319,2.783,321,1.539,406,5.365,460,4.756,544,3.756,546,3.875,578,3.388,853,3.875,854,4.583,855,6.512,856,4.583,857,4.583,858,4.583,859,6.345]],["title/injectables/SubscriptionService.html",[161,1.065,560,1.887]],["body/injectables/SubscriptionService.html",[3,0.222,4,0.193,9,0.193,11,0.356,12,1.502,23,2.044,37,0.137,38,0.394,42,1.134,45,0.869,47,1.297,49,1.139,50,0.026,51,1.063,52,0.286,53,0.99,59,2.147,63,1.438,68,0.76,75,0.869,77,0.616,80,0.995,81,0.662,88,0.76,91,0.222,92,0.709,93,1.06,134,0.016,135,0.016,150,1.071,151,3.276,161,1.384,163,1.622,164,2.089,169,1.622,171,2.452,172,2.675,173,2.675,180,1.479,181,2.675,182,3.484,183,2.675,185,2.675,198,3.388,202,3.264,209,1.918,226,4.082,230,2.109,247,2.942,248,2.942,249,2.675,250,2.452,251,2.942,252,1.758,258,0.869,261,2.675,289,1.84,292,2.147,321,2.204,387,2.426,462,2.675,560,2.452,561,3.993,578,3.213,733,2.109,860,2.67,861,4.405,862,4.405,863,5.488,864,4.405,865,3.158,866,3.724,867,3.158,868,5.488,869,3.724,870,3.158,871,3.158,872,3.158,873,3.158,874,3.158]],["title/interfaces/Topic.html",[277,0.409,321,1.138]],["body/interfaces/Topic.html",[3,0.327,4,0.284,9,0.284,11,0.459,37,0.202,38,0.507,50,0.025,51,1.336,52,0.333,77,1.298,91,0.327,134,0.021,135,0.021,145,3.931,150,0.907,189,3.105,215,5.178,277,0.561,279,1.461,281,2.823,289,1.875,292,2.199,321,2.141,430,2.387,455,2.588,752,4.948,875,3.931,876,4.649,877,4.649,878,4.649]],["title/components/TopicComponent.html",[0,0.447,128,1.065]],["body/components/TopicComponent.html",[0,0.826,1,0.927,2,1.319,3,0.207,4,0.18,5,1.059,7,1.059,8,1.059,9,0.18,11,0.343,20,3.549,28,0.927,29,2.365,30,2.212,31,1.507,35,1.507,37,0.128,42,1.08,47,1.196,50,0.026,51,0.88,52,0.255,63,0.709,64,0.99,67,1.08,68,1.01,80,0.966,81,0.618,91,0.207,92,0.663,102,1.059,103,1.507,104,1.507,105,1.059,106,1.912,107,1.059,108,1.059,109,0.927,110,1.059,111,0.927,112,0.927,113,1.059,114,0.927,115,1.059,116,0.927,117,1.059,118,0.927,119,1.059,120,0.927,121,1.059,122,0.927,123,1.059,124,0.927,125,1.059,126,0.927,127,1.059,128,1.673,129,1.059,130,1.536,131,0.618,132,1.059,133,1.059,134,0.016,135,0.016,258,0.811,289,1.234,294,2.337,315,1.728,316,2.549,321,2.239,344,1.613,347,2.337,366,1.133,378,1.97,387,2.659,419,3.549,444,2.804,468,4.132,561,4.018,623,3.549,671,3.549,672,3.961,673,3.549,674,2.968,678,3.549,680,1.791,879,2.494,880,5.626,881,4.198,882,4.198,883,4.198,884,5.324,885,4.198,886,4.198,887,5.847,888,4.198,889,2.949,890,5.626,891,2.949,892,2.949,893,2.949,894,4.198,895,4.198,896,4.198,897,2.949,898,2.949,899,2.949,900,2.949,901,4.198,902,4.198,903,4.198]],["title/injectables/TopicService.html",[161,1.065,318,1.887]],["body/injectables/TopicService.html",[3,0.272,4,0.236,9,0.236,11,0.272,12,1.841,23,1.768,37,0.169,38,0.452,39,1.768,42,1.301,45,1.065,47,1.264,49,0.87,50,0.026,51,0.811,52,0.264,53,0.755,63,1.216,68,0.931,75,1.065,77,0.755,80,1.082,81,0.811,88,0.931,91,0.272,92,0.87,93,1.3,134,0.019,135,0.019,161,1.588,163,1.988,164,1.594,169,1.988,171,2.814,172,3.069,173,3.069,180,1.697,181,3.069,182,3.65,183,3.069,185,3.069,198,3.758,202,2.889,247,3.376,248,3.376,249,3.069,250,2.814,251,3.376,252,2.155,258,1.065,318,2.814,321,2.078,347,3.534,448,3.376,462,3.069,733,2.586,747,3.273,904,3.273,905,4.274,906,5.965,907,5.054,908,3.871,909,3.871]],["title/components/TopicsComponent.html",[0,0.447,130,1.065]],["body/components/TopicsComponent.html",[0,0.732,1,0.72,2,1.095,3,0.161,4,0.14,5,0.823,7,0.823,8,0.823,9,0.14,11,0.161,23,1.325,25,1.339,26,1.737,27,1.737,28,0.72,29,2.262,30,2.115,31,1.251,35,1.251,37,0.1,38,0.312,39,1.798,40,1.737,42,0.897,43,1.941,44,1.941,45,0.959,47,1.285,49,0.948,50,0.026,51,1.062,52,0.246,53,0.823,56,1.435,57,1.435,58,1.435,59,1.251,60,1.435,61,1.435,62,1.435,63,1.22,64,2.007,66,1.435,67,0.897,68,0.551,75,0.63,76,1.737,80,1.063,81,0.48,87,0.943,88,0.551,91,0.161,92,0.515,97,1.941,100,0.943,101,0.943,102,0.823,103,1.251,104,1.251,105,0.823,106,1.692,107,0.823,108,0.823,109,0.72,110,0.823,111,0.72,112,0.72,113,0.823,114,0.72,115,0.823,116,0.72,117,0.823,118,0.72,119,0.823,120,0.72,121,0.823,122,0.72,123,0.823,124,0.72,125,0.823,126,0.72,127,0.823,128,1.481,129,0.823,130,1.481,131,0.884,132,0.823,133,0.823,134,0.013,135,0.013,150,0.68,159,1.251,180,1.583,258,0.63,284,1.658,289,1.57,292,1.918,315,1.435,318,3.185,319,2.116,321,2.093,322,2.592,336,2.817,344,1.339,347,3.592,364,2.947,366,0.88,378,1.53,380,1.704,387,2.529,388,1.658,397,2.42,417,2.116,418,1.79,455,1.94,529,2.328,549,2.592,560,3.263,561,3.567,577,3.973,591,1.704,618,2.947,674,2.561,680,1.391,691,3.137,707,1.704,752,3.506,848,2.947,866,2.947,869,2.947,910,1.937,911,3.485,912,3.485,913,4.713,914,5.34,915,2.291,916,3.485,917,2.291,918,2.291,919,2.291,920,3.485,921,2.291,922,2.291,923,2.291,924,2.291,925,2.291,926,3.485,927,2.291,928,2.291,929,2.291]],["title/interfaces/User.html",[150,0.661,277,0.409]],["body/interfaces/User.html",[3,0.304,4,0.264,9,0.264,11,0.304,17,2.888,37,0.188,38,0.485,50,0.026,52,0.309,53,0.844,77,1.32,91,0.381,134,0.02,135,0.02,150,1.249,228,2.221,231,2.82,243,1.781,264,1.553,277,0.655,279,1.359,284,2.057,289,1.828,292,2.129,294,3.301,295,3.021,306,1.912,454,3.217,550,3.295,552,3.733,553,4.108,559,3.217,586,2.408,601,2.888,930,3.217,931,4.325,932,3.657,933,3.657]],["title/injectables/UserService.html",[161,1.065,557,2.264]],["body/injectables/UserService.html",[3,0.254,4,0.221,9,0.221,11,0.34,12,1.723,23,2.056,37,0.158,42,1.245,45,0.997,47,1.223,49,1.087,50,0.026,51,1.014,52,0.252,53,0.944,63,1.398,80,1.054,81,0.759,88,0.871,91,0.254,92,0.814,93,1.217,134,0.018,135,0.018,150,1.301,151,3.598,161,1.52,163,1.86,164,1.992,169,1.86,171,2.693,172,2.938,173,2.938,180,1.624,181,2.938,182,3.598,183,2.938,185,2.938,219,3.882,229,3.598,252,2.017,258,0.997,261,2.2,462,2.938,550,2.938,557,3.231,558,4.914,559,4.634,586,3.236,605,4.605,733,2.42,737,4.914,905,4.091,934,3.063,935,4.837,936,4.837,937,5.812,938,3.623,939,3.623,940,4.837,941,3.623,942,4.837,943,4.837,944,3.623,945,3.623,946,3.623]],["title/interfaces/UserUpdateRequest.html",[277,0.409,586,1.887]],["body/interfaces/UserUpdateRequest.html",[3,0.302,4,0.262,9,0.262,11,0.302,17,2.869,37,0.187,38,0.483,50,0.026,52,0.308,53,1.153,77,1.336,91,0.379,134,0.02,135,0.02,150,1.21,228,2.774,231,3.149,243,1.769,264,1.94,277,0.652,279,1.35,289,1.263,292,1.542,294,3.29,295,3.008,454,3.195,550,3.281,552,3.762,553,4.133,586,3.008,930,3.195,932,4.568,933,3.632]],["title/interfaces/author.html",[277,0.409,286,1.612]],["body/interfaces/author.html",[3,0.407,4,0.294,9,0.294,11,0.338,37,0.21,38,0.518,50,0.025,52,0.302,77,1.213,91,0.338,134,0.021,135,0.021,230,1.849,277,0.699,279,1.512,281,2.922,284,2.289,286,3.069,289,1.897,292,2.232,295,2.679,307,2.679,430,2.471,552,3.675,634,2.922,947,4.069,948,4.812,949,4.812,950,4.069,951,4.812,952,4.812]],["title/coverage.html",[953,3.911]],["body/coverage.html",[0,0.877,1,1.07,9,0.208,10,2.879,24,1.748,50,0.026,52,0.178,67,0.876,84,1.402,109,1.07,111,1.07,114,1.07,116,1.07,118,1.07,120,1.07,122,1.07,124,1.07,126,1.07,128,1.07,130,1.07,131,0.713,134,0.017,135,0.017,136,2.532,137,2.532,139,2.879,150,0.664,161,1.922,170,2.879,222,2.067,230,1.308,239,2.067,255,2.274,277,0.808,278,1.619,280,2.879,286,1.619,302,2.067,303,2.879,314,2.879,318,1.895,321,1.143,323,1.895,376,2.067,424,2.879,425,2.879,426,2.879,450,2.879,508,2.879,541,2.879,543,2.879,548,2.879,557,2.274,560,1.895,578,1.895,586,1.895,630,3.451,669,2.067,670,2.879,687,2.879,728,2.879,729,2.879,751,2.879,814,2.879,842,2.879,844,2.879,853,2.879,860,2.879,875,2.879,879,2.879,904,2.879,910,2.879,930,3.451,934,2.879,947,2.879,953,2.879,954,3.404,955,3.404,956,6.372,957,4.639,958,2.879,959,3.404,960,2.879,961,3.404,962,3.404,963,5.666,964,5.666,965,5.277,966,5.277,967,3.404,968,3.404,969,5.277,970,2.879,971,3.404,972,5.277,973,5.277,974,3.404,975,3.404,976,3.404,977,3.404,978,4.639,979,3.404,980,3.404,981,3.404,982,4.639,983,4.639,984,4.639,985,3.404,986,3.404,987,4.639,988,4.639,989,3.404,990,3.404,991,3.404,992,3.404,993,3.404,994,3.404,995,3.404,996,2.879,997,2.879,998,2.879,999,3.404,1000,3.404,1001,3.404]],["title/dependencies.html",[1002,2.394,1003,3.032]],["body/dependencies.html",[50,0.026,81,1.026,83,1.759,88,1.178,134,0.022,135,0.022,366,1.882,368,2.727,1003,3.644,1004,4.898,1005,6.264,1006,4.898,1007,5.856,1008,4.898,1009,6.633,1010,4.898,1011,5.856,1012,4.951,1013,4.898,1014,4.898,1015,4.898,1016,4.898,1017,4.898,1018,4.898]],["title/miscellaneous/functions.html",[1019,1.891,1020,3.447]],["body/miscellaneous/functions.html",[11,0.342,23,1.834,37,0.212,49,1.095,50,0.024,51,1.021,52,0.254,53,0.951,63,1.172,134,0.022,135,0.022,192,3.625,206,3.625,250,2.713,264,1.75,388,2.973,644,3.625,996,4.121,997,4.121,998,4.936,1019,3.255,1020,4.121,1021,4.874,1022,4.874,1023,6.25,1024,6.25,1025,4.874,1026,4.874,1027,4.874,1028,5.838,1029,4.874,1030,4.874,1031,4.874,1032,4.874,1033,4.874,1034,4.874,1035,4.874]],["title/index.html",[37,0.123,601,1.891,1036,2.394]],["body/index.html",[4,0.281,13,3.131,30,1.546,50,0.021,69,3.894,78,3.425,134,0.021,135,0.021,180,1.546,243,1.896,429,3.425,483,3.894,489,3.894,577,3.425,689,3.425,950,3.894,1003,3.425,1012,3.894,1036,3.894,1037,6.355,1038,4.605,1039,4.605,1040,6.098,1041,3.894,1042,5.641,1043,4.605,1044,4.605,1045,4.605,1046,4.605,1047,4.605,1048,4.605,1049,6.098,1050,4.605,1051,5.641,1052,6.098,1053,4.605,1054,4.605,1055,4.605,1056,5.641,1057,4.605,1058,4.605,1059,4.605,1060,5.641,1061,4.605,1062,5.641,1063,4.605,1064,4.605,1065,4.605,1066,4.605,1067,4.605,1068,4.605,1069,4.605,1070,4.605,1071,4.605,1072,4.605]],["title/modules.html",[1073,3.911]],["body/modules.html",[50,0.023,134,0.023,135,0.023,1073,4.639]],["title/overview.html",[1074,3.911]],["body/overview.html",[2,1.685,50,0.023,134,0.023,135,0.023,136,3.99,169,2.754,279,1.685,970,4.535,1074,4.535,1075,5.364,1076,5.364,1077,5.364]],["title/properties.html",[38,0.365,1002,2.394]],["body/properties.html",[38,0.486,50,0.024,134,0.023,135,0.023,1041,4.6,1078,5.44]],["title/miscellaneous/variables.html",[1019,1.891,1079,3.447]],["body/miscellaneous/variables.html",[37,0.228,50,0.025,52,0.273,68,1.259,75,1.44,134,0.023,135,0.023,958,4.424,960,5.148,1019,3.495,1079,4.424,1080,5.232,1081,5.232,1082,5.232,1083,5.232,1084,5.232]]],"invertedIndex":[["",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["0.0.0",{"_index":1078,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1076,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":966,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["11.2.x",{"_index":1050,"title":{},"body":{"index.html":{}}}],["12",{"_index":970,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["13",{"_index":1077,"title":{},"body":{"overview.html":{}}}],["16",{"_index":967,"title":{},"body":{"coverage.html":{}}}],["19.2.0",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["19.2.4",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["19.2.5",{"_index":1042,"title":{},"body":{"index.html":{}}}],["19.2.7",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["5/10",{"_index":984,"title":{},"body":{"coverage.html":{}}}],["5/11",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":395,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["55",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1075,"title":{},"body":{"overview.html":{}}}],["6/12",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["8/10",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["800px",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"injectables/ScreenService.html":{}}}],["83",{"_index":980,"title":{},"body":{"coverage.html":{}}}],["abonnements",{"_index":628,"title":{},"body":{"components/MeComponent.html":{}}}],["above",{"_index":754,"title":{},"body":{"components/PostsComponent.html":{}}}],["absent",{"_index":648,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["accommodate",{"_index":636,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["activated",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["activatedroute",{"_index":688,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["active",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["actual_component",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["add",{"_index":317,"title":{},"body":{"components/CreatepostComponent.html":{},"injectables/PostService.html":{}}}],["addcomment",{"_index":731,"title":{},"body":{"injectables/PostService.html":{}}}],["addcomment(id",{"_index":735,"title":{},"body":{"injectables/PostService.html":{}}}],["added",{"_index":856,"title":{},"body":{"interfaces/Subscription.html":{}}}],["adding",{"_index":309,"title":{},"body":{"interfaces/CommentRequest.html":{}}}],["adresse",{"_index":841,"title":{},"body":{"components/RegisterComponent.html":{}}}],["allow",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{}}}],["allows",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{}}}],["already",{"_index":431,"title":{},"body":{"components/GreetingComponent.html":{}}}],["angular",{"_index":1040,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["angular/common",{"_index":366,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["angular/compiler",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":368,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":707,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["angular/material/card",{"_index":680,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["angular/material/divider",{"_index":589,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{}}}],["angular/material/form",{"_index":370,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["angular/material/icon",{"_index":371,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["angular/material/input",{"_index":372,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["angular/material/list",{"_index":493,"title":{},"body":{"components/LayoutComponent.html":{},"components/PostDetailsComponent.html":{}}}],["angular/material/select",{"_index":373,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["angular/material/sidenav",{"_index":494,"title":{},"body":{"components/LayoutComponent.html":{}}}],["angular/material/snack",{"_index":374,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["angular/material/toolbar",{"_index":495,"title":{},"body":{"components/LayoutComponent.html":{}}}],["angular/platform",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"dependencies.html":{}}}],["angular’s",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["api",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"miscellaneous/functions.html":{}}}],["api/auth",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/posts",{"_index":730,"title":{},"body":{"injectables/PostService.html":{}}}],["api/subscription",{"_index":863,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["api/topic",{"_index":906,"title":{},"body":{"injectables/TopicService.html":{}}}],["api/user/me",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["app",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"index.html":{}}}],["app.component.html",{"_index":36,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":34,"title":{},"body":{"components/AppComponent.html":{}}}],["app.git",{"_index":1054,"title":{},"body":{"index.html":{}}}],["app/core/interfaces/commentrequest.interface",{"_index":706,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["app/core/interfaces/post.interface",{"_index":681,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["app/core/interfaces/postrequest.interface",{"_index":377,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["app/core/interfaces/registerrequest.interface",{"_index":828,"title":{},"body":{"components/RegisterComponent.html":{}}}],["app/core/interfaces/subscription.interface",{"_index":787,"title":{},"body":{"components/PostsComponent.html":{}}}],["app/core/interfaces/topic.interface",{"_index":378,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["app/core/services/auth.service",{"_index":441,"title":{},"body":{"components/GreetingComponent.html":{}}}],["app/core/services/post.service",{"_index":379,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["app/core/services/screen.service",{"_index":496,"title":{},"body":{"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["app/core/services/subscription.service",{"_index":591,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["app/core/services/topic.service",{"_index":380,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":960,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Comment.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["applicationconfig",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":650,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["arrow_back",{"_index":410,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["arrow_downward",{"_index":813,"title":{},"body":{"components/PostsComponent.html":{}}}],["arrow_upward",{"_index":812,"title":{},"body":{"components/PostsComponent.html":{}}}],["article",{"_index":414,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostsComponent.html":{}}}],["article@if",{"_index":423,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["articles",{"_index":506,"title":{},"body":{"components/LayoutComponent.html":{}}}],["asc",{"_index":776,"title":{},"body":{"components/PostsComponent.html":{}}}],["associated",{"_index":651,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["async",{"_index":417,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["asyncpipe",{"_index":336,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["attaches",{"_index":1026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticate",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["authentication",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommentRequest.html":{},"interfaces/LoginResponse.html":{}}}],["authguard",{"_index":137,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["authinterceptor",{"_index":998,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["authinterceptor(req",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["author",{"_index":286,"title":{"interfaces/author.html":{}},"body":{"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"components/PostsComponent.html":{},"interfaces/author.html":{},"coverage.html":{}}}],["author.interface",{"_index":293,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["authservice",{"_index":84,"title":{"injectables/AuthService.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{},"coverage.html":{}}}],["authservice.isloggedin",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authservice.login",{"_index":522,"title":{},"body":{"components/LoginComponent.html":{}}}],["authservice.register",{"_index":824,"title":{},"body":{"components/RegisterComponent.html":{}}}],["automatically",{"_index":1070,"title":{},"body":{"index.html":{}}}],["available",{"_index":448,"title":{},"body":{"components/GreetingComponent.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"injectables/TopicService.html":{}}}],["avec",{"_index":391,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{}}}],["avoid",{"_index":857,"title":{},"body":{"interfaces/Subscription.html":{}}}],["b",{"_index":804,"title":{},"body":{"components/PostsComponent.html":{}}}],["back",{"_index":882,"title":{},"body":{"components/TopicComponent.html":{}}}],["backend",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/PostRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"index.html":{}}}],["backend’s",{"_index":656,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["bar",{"_index":375,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["base",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{}}}],["based",{"_index":1039,"title":{},"body":{"index.html":{}}}],["bash",{"_index":1059,"title":{},"body":{"index.html":{}}}],["bearer",{"_index":1027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["behaviorsubject",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"components/PostsComponent.html":{},"injectables/ScreenService.html":{}}}],["behaviorsubject(false",{"_index":850,"title":{},"body":{"injectables/ScreenService.html":{}}}],["behaviorsubject(this.hastoken",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["belong",{"_index":877,"title":{},"body":{"interfaces/Topic.html":{}}}],["belongs",{"_index":301,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["body",{"_index":647,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["boolean",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Topic.html":{}}}],["breakpoint",{"_index":520,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["breakpointobserver",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["broadcast",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["browser",{"_index":1012,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["build",{"_index":355,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["buildform",{"_index":348,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["builds",{"_index":325,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["business",{"_index":895,"title":{},"body":{"components/TopicComponent.html":{}}}],["buton",{"_index":428,"title":{},"body":{"components/GreetingComponent.html":{}}}],["call",{"_index":460,"title":{},"body":{"components/LayoutComponent.html":{},"interfaces/Subscription.html":{}}}],["calling",{"_index":361,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["calls",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{}}}],["canactivate",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{}}}],["card",{"_index":671,"title":{},"body":{"components/PostComponent.html":{},"components/TopicComponent.html":{}}}],["category",{"_index":876,"title":{},"body":{"interfaces/Topic.html":{}}}],["cd",{"_index":1060,"title":{},"body":{"index.html":{}}}],["centralize",{"_index":845,"title":{},"body":{"injectables/ScreenService.html":{}}}],["chain",{"_index":1030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["change",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/MeComponent.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["changes",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["checks",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["chnage",{"_index":920,"title":{},"body":{"components/TopicsComponent.html":{}}}],["class",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["cleans",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["clears",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["clone",{"_index":1052,"title":{},"body":{"index.html":{}}}],["cloned",{"_index":1035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["combinelatest",{"_index":782,"title":{},"body":{"components/PostsComponent.html":{}}}],["comment",{"_index":278,"title":{"interfaces/Comment.html":{}},"body":{"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["comment.author.username",{"_index":720,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["comment.content",{"_index":721,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["comment.interface",{"_index":641,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["commentaires",{"_index":717,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["commentform",{"_index":695,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["commentrequest",{"_index":302,"title":{"interfaces/CommentRequest.html":{}},"body":{"interfaces/CommentRequest.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["comments",{"_index":634,"title":{},"body":{"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"interfaces/author.html":{}}}],["comment’s",{"_index":300,"title":{},"body":{"interfaces/Comment.html":{}}}],["commonmodule",{"_index":335,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["completing",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"overview.html":{}}}],["compte",{"_index":836,"title":{},"body":{"components/RegisterComponent.html":{}}}],["configuration",{"_index":846,"title":{},"body":{"injectables/ScreenService.html":{}}}],["confirms",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["connecter",{"_index":445,"title":{},"body":{"components/GreetingComponent.html":{},"components/LoginComponent.html":{}}}],["consider",{"_index":1064,"title":{},"body":{"index.html":{}}}],["console.log(\"topic.subscribe",{"_index":927,"title":{},"body":{"components/TopicsComponent.html":{}}}],["console.log(\"topic.unsubscribe",{"_index":929,"title":{},"body":{"components/TopicsComponent.html":{}}}],["const",{"_index":384,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["constraints",{"_index":329,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["constructor",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"components/GreetingComponent.html":{}}}],["constructor(formbuilder",{"_index":350,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["constructor(http",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(httpclient",{"_index":733,"title":{},"body":{"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["constructor(observer",{"_index":46,"title":{},"body":{"components/AppComponent.html":{}}}],["constructor(postservice",{"_index":697,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["constructor(private",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["constructor(screenservice",{"_index":477,"title":{},"body":{"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["constructor(topicservice",{"_index":915,"title":{},"body":{"components/TopicsComponent.html":{}}}],["constructor(userservice",{"_index":568,"title":{},"body":{"components/MeComponent.html":{}}}],["containing",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"components/PostDetailsComponent.html":{},"injectables/UserService.html":{}}}],["contains",{"_index":755,"title":{},"body":{"components/PostsComponent.html":{}}}],["content",{"_index":287,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{}}}],["contenu",{"_index":422,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["context",{"_index":313,"title":{},"body":{"interfaces/CommentRequest.html":{}}}],["core/interfaces/loginrequest.interface",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["core/interfaces/loginresponse.interface",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/interfaces/post.interface",{"_index":784,"title":{},"body":{"components/PostsComponent.html":{}}}],["core/interfaces/user.interface",{"_index":587,"title":{},"body":{"components/MeComponent.html":{}}}],["core/services/auth.service",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["core/services/post.service",{"_index":785,"title":{},"body":{"components/PostsComponent.html":{}}}],["core/services/screen.service",{"_index":89,"title":{},"body":{"components/AppComponent.html":{}}}],["core/services/user.service",{"_index":588,"title":{},"body":{"components/MeComponent.html":{}}}],["corresponding",{"_index":894,"title":{},"body":{"components/TopicComponent.html":{}}}],["coverage",{"_index":953,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cr",{"_index":390,"title":{},"body":{"components/CreatepostComponent.html":{},"components/RegisterComponent.html":{}}}],["create",{"_index":360,"title":{},"body":{"components/CreatepostComponent.html":{},"injectables/PostService.html":{}}}],["created",{"_index":298,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["created_at",{"_index":288,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["createpost",{"_index":334,"title":{},"body":{"components/CreatepostComponent.html":{},"injectables/PostService.html":{}}}],["createpost'},{'name",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["createpost(postrequest",{"_index":739,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost.component.html",{"_index":343,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["createpost.component.scss",{"_index":345,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["createpostcomponent",{"_index":109,"title":{"components/CreatepostComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["createpostform",{"_index":346,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["creating",{"_index":304,"title":{},"body":{"interfaces/CommentRequest.html":{},"interfaces/PostRequest.html":{}}}],["creation",{"_index":332,"title":{},"body":{"components/CreatepostComponent.html":{},"interfaces/Post.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{}}}],["credentials",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials).pipe",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["création",{"_index":402,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["créer",{"_index":411,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostsComponent.html":{}}}],["cupdating",{"_index":932,"title":{},"body":{"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["current",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"interfaces/Topic.html":{}}}],["currently",{"_index":447,"title":{},"body":{"components/GreetingComponent.html":{}}}],["d'utilisateur",{"_index":537,"title":{},"body":{"components/LoginComponent.html":{}}}],["d\\'utilisateur",{"_index":540,"title":{},"body":{"components/LoginComponent.html":{}}}],["data",{"_index":307,"title":{},"body":{"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"components/MeComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/author.html":{}}}],["data.email",{"_index":597,"title":{},"body":{"components/MeComponent.html":{}}}],["data.username",{"_index":595,"title":{},"body":{"components/MeComponent.html":{}}}],["date",{"_index":291,"title":{},"body":{"interfaces/Comment.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["date(a.created_at).gettime",{"_index":806,"title":{},"body":{"components/PostsComponent.html":{}}}],["date(b.created_at).gettime",{"_index":808,"title":{},"body":{"components/PostsComponent.html":{}}}],["datea",{"_index":805,"title":{},"body":{"components/PostsComponent.html":{}}}],["dateb",{"_index":807,"title":{},"body":{"components/PostsComponent.html":{}}}],["datepipe",{"_index":675,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{}}}],["de",{"_index":400,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["decorators",{"_index":486,"title":{},"body":{"components/LayoutComponent.html":{}}}],["default",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["defines",{"_index":305,"title":{},"body":{"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/PostRequest.html":{},"interfaces/RegisterRequest.html":{}}}],["delete",{"_index":608,"title":{},"body":{"components/MeComponent.html":{}}}],["dependencies",{"_index":1003,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["detailed",{"_index":639,"title":{},"body":{"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{}}}],["details",{"_index":633,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["determined",{"_index":312,"title":{},"body":{"interfaces/CommentRequest.html":{}}}],["determines",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["directive",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["directives",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["display",{"_index":285,"title":{},"body":{"interfaces/Comment.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{}}}],["displaying",{"_index":451,"title":{},"body":{"components/LayoutComponent.html":{}}}],["displays",{"_index":315,"title":{},"body":{"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["documentation",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["done",{"_index":896,"title":{},"body":{"components/TopicComponent.html":{}}}],["dsc",{"_index":777,"title":{},"body":{"components/PostsComponent.html":{}}}],["dto",{"_index":949,"title":{},"body":{"interfaces/author.html":{}}}],["du",{"_index":616,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["duration",{"_index":394,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["dynamic",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["déconnecter",{"_index":505,"title":{},"body":{"components/LayoutComponent.html":{}}}],["désabonner",{"_index":902,"title":{},"body":{"components/TopicComponent.html":{}}}],["d’utilisateur",{"_index":840,"title":{},"body":{"components/RegisterComponent.html":{}}}],["e",{"_index":533,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["e.g",{"_index":662,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["element",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["email",{"_index":553,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["emit",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/TopicComponent.html":{}}}],["emited",{"_index":774,"title":{},"body":{"components/PostsComponent.html":{}}}],["emits",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/ScreenService.html":{},"injectables/UserService.html":{}}}],["emitting",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{}}}],["empty",{"_index":868,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["enable",{"_index":316,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{}}}],["endpoints",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":631,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["err",{"_index":529,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["error",{"_index":397,"title":{},"body":{"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["errormessage",{"_index":565,"title":{},"body":{"components/MeComponent.html":{}}}],["even",{"_index":757,"title":{},"body":{"components/PostsComponent.html":{}}}],["event",{"_index":883,"title":{},"body":{"components/TopicComponent.html":{}}}],["eventemitter",{"_index":890,"title":{},"body":{"components/TopicComponent.html":{}}}],["example",{"_index":1056,"title":{},"body":{"index.html":{}}}],["exists",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["expected",{"_index":689,"title":{},"body":{"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"index.html":{}}}],["export",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}}}],["exposing",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["fails",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{}}}],["fb",{"_index":569,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{}}}],["feature",{"_index":951,"title":{},"body":{"interfaces/author.html":{}}}],["fermer",{"_index":393,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["fetching",{"_index":652,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["field",{"_index":311,"title":{},"body":{"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["fields",{"_index":635,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"coverage.html":{}}}],["files",{"_index":1072,"title":{},"body":{"index.html":{}}}],["filter",{"_index":783,"title":{},"body":{"components/PostsComponent.html":{}}}],["filtered",{"_index":753,"title":{},"body":{"components/PostsComponent.html":{}}}],["filtered.sort((a",{"_index":803,"title":{},"body":{"components/PostsComponent.html":{}}}],["filteredposts",{"_index":760,"title":{},"body":{"components/PostsComponent.html":{}}}],["flag",{"_index":455,"title":{},"body":{"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{}}}],["flip",{"_index":766,"title":{},"body":{"components/PostsComponent.html":{}}}],["flipsort",{"_index":762,"title":{},"body":{"components/PostsComponent.html":{}}}],["follow",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["form",{"_index":356,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["formbuilder",{"_index":351,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["formgroup",{"_index":327,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["forwarding",{"_index":1033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["front",{"_index":1037,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1038,"title":{},"body":{"index.html":{}}}],["full",{"_index":632,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["function",{"_index":997,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1020,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getme",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["getpost",{"_index":732,"title":{},"body":{"injectables/PostService.html":{}}}],["getpost(id",{"_index":741,"title":{},"body":{"injectables/PostService.html":{}}}],["getting",{"_index":601,"title":{"index.html":{}},"body":{"components/MeComponent.html":{},"injectables/PostService.html":{},"interfaces/User.html":{}}}],["gettoken",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1051,"title":{},"body":{"index.html":{}}}],["git@github.com:jceintrey/mdd.git",{"_index":1057,"title":{},"body":{"index.html":{}}}],["git@github.com:jceintrey/yoga",{"_index":1053,"title":{},"body":{"index.html":{}}}],["given",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{}}}],["greeting",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["greetingcomponent",{"_index":111,"title":{"components/GreetingComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["guard",{"_index":136,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handling",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["hastoken",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["html",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["http",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{},"miscellaneous/functions.html":{}}}],["http://localhost:4200",{"_index":1069,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["httperrorresponse",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpevent",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphandlerfn",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httprequest",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["i.e",{"_index":849,"title":{},"body":{"injectables/ScreenService.html":{}}}],["id",{"_index":289,"title":{},"body":{"interfaces/Comment.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}}}],["identifier",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"interfaces/author.html":{},"coverage.html":{}}}],["implements",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["import",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["includes",{"_index":310,"title":{},"body":{"interfaces/CommentRequest.html":{}}}],["including",{"_index":658,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["indentifier",{"_index":743,"title":{},"body":{"injectables/PostService.html":{}}}],["index",{"_index":37,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":878,"title":{},"body":{"interfaces/Topic.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}}}],["information",{"_index":299,"title":{},"body":{"interfaces/Comment.html":{}}}],["informations",{"_index":550,"title":{},"body":{"components/MeComponent.html":{},"injectables/PostService.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{}}}],["infos",{"_index":602,"title":{},"body":{"components/MeComponent.html":{}}}],["initializes",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["injectable",{"_index":161,"title":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injection",{"_index":673,"title":{},"body":{"components/PostComponent.html":{},"components/TopicComponent.html":{}}}],["input",{"_index":672,"title":{},"body":{"components/PostComponent.html":{},"components/PostsComponent.html":{},"components/TopicComponent.html":{}}}],["inputs",{"_index":678,"title":{},"body":{"components/PostComponent.html":{},"components/TopicComponent.html":{}}}],["inscription",{"_index":839,"title":{},"body":{"components/RegisterComponent.html":{}}}],["install",{"_index":1058,"title":{},"body":{"index.html":{}}}],["interact",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["interceptor",{"_index":1025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":277,"title":{"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"interfaces/Topic.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}},"body":{"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"interfaces/Topic.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"coverage.html":{}}}],["interfaces",{"_index":279,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"interfaces/Topic.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"overview.html":{}}}],["interfaces/commentrequest.interface",{"_index":746,"title":{},"body":{"injectables/PostService.html":{}}}],["interfaces/post.interface",{"_index":744,"title":{},"body":{"injectables/PostService.html":{}}}],["interfaces/postrequest.interface",{"_index":745,"title":{},"body":{"injectables/PostService.html":{}}}],["interfaces/registerrequest.interface",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["interfaces/subscription.interface",{"_index":871,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["interfaces/topic.interface",{"_index":909,"title":{},"body":{"injectables/TopicService.html":{}}}],["interfaces/user.interface",{"_index":944,"title":{},"body":{"injectables/UserService.html":{}}}],["irunning",{"_index":1061,"title":{},"body":{"index.html":{}}}],["iscollapsed",{"_index":474,"title":{},"body":{"components/LayoutComponent.html":{}}}],["islogged",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["isloggedin",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["isloggedsubject",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["ismobile",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{}}}],["iso",{"_index":645,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["issortup",{"_index":761,"title":{},"body":{"components/PostsComponent.html":{}}}],["items",{"_index":660,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["join",{"_index":772,"title":{},"body":{"components/PostsComponent.html":{}}}],["jour",{"_index":613,"title":{},"body":{"components/MeComponent.html":{}}}],["jwt",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["know",{"_index":848,"title":{},"body":{"injectables/ScreenService.html":{},"components/TopicsComponent.html":{}}}],["l'abonnement",{"_index":626,"title":{},"body":{"components/MeComponent.html":{}}}],["l'article",{"_index":421,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["l\\'article",{"_index":403,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["la",{"_index":401,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["layout",{"_index":453,"title":{},"body":{"components/LayoutComponent.html":{}}}],["layout'},{'name",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["layout.component.html",{"_index":472,"title":{},"body":{"components/LayoutComponent.html":{}}}],["layout.component.scss",{"_index":473,"title":{},"body":{"components/LayoutComponent.html":{}}}],["layoutcomponent",{"_index":114,"title":{"components/LayoutComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["leaks",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["legend",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["library",{"_index":1044,"title":{},"body":{"index.html":{}}}],["link",{"_index":854,"title":{},"body":{"interfaces/Subscription.html":{}}}],["list",{"_index":322,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["listing",{"_index":862,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["localstorage",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.getitem('jwt",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.removeitem('jwt",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('jwt",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["logged",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"components/GreetingComponent.html":{}}}],["loggedin",{"_index":439,"title":{},"body":{"components/GreetingComponent.html":{}}}],["logging",{"_index":542,"title":{},"body":{"interfaces/LoginRequest.html":{}}}],["login",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"components/GreetingComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/RegisterComponent.html":{}}}],["login'},{'name",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["login(credentials",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.component.html",{"_index":511,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":512,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":116,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["loginform",{"_index":513,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginrequest",{"_index":222,"title":{"interfaces/LoginRequest.html":{}},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"coverage.html":{}}}],["loginresponse",{"_index":255,"title":{"interfaces/LoginResponse.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["logout",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"components/LayoutComponent.html":{}}}],["logs",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["longdate",{"_index":684,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["lors",{"_index":399,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["made",{"_index":282,"title":{},"body":{"interfaces/Comment.html":{}}}],["mail",{"_index":534,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["make",{"_index":1065,"title":{},"body":{"index.html":{}}}],["manage",{"_index":456,"title":{},"body":{"components/LayoutComponent.html":{}}}],["manages",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{}}}],["map(([posts",{"_index":797,"title":{},"body":{"components/PostsComponent.html":{}}}],["map((response",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["map(islogged",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{}}}],["map(res",{"_index":792,"title":{},"body":{"components/PostsComponent.html":{}}}],["map(topics",{"_index":621,"title":{},"body":{"components/MeComponent.html":{}}}],["matbuttonmodule",{"_index":691,"title":{},"body":{"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["matcardmodule",{"_index":674,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["match",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["matching",{"_index":135,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matdividermodule",{"_index":562,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{}}}],["material",{"_index":489,"title":{},"body":{"components/LayoutComponent.html":{},"index.html":{}}}],["matformfield",{"_index":369,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["matformfieldmodule",{"_index":340,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["maticon",{"_index":467,"title":{},"body":{"components/LayoutComponent.html":{},"components/LoginComponent.html":{}}}],["maticonmodule",{"_index":339,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["matinputmodule",{"_index":342,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["matlistmodule",{"_index":692,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["matnavlist",{"_index":469,"title":{},"body":{"components/LayoutComponent.html":{}}}],["matselectmodule",{"_index":341,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["matsidenav",{"_index":464,"title":{},"body":{"components/LayoutComponent.html":{}}}],["matsidenavcontainer",{"_index":466,"title":{},"body":{"components/LayoutComponent.html":{}}}],["matsidenavcontent",{"_index":465,"title":{},"body":{"components/LayoutComponent.html":{}}}],["matsnackbar",{"_index":330,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["mattoolbar",{"_index":470,"title":{},"body":{"components/LayoutComponent.html":{}}}],["mattoolbarrow",{"_index":471,"title":{},"body":{"components/LayoutComponent.html":{}}}],["mdd",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"components/GreetingComponent.html":{},"index.html":{}}}],["me'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["me.component.html",{"_index":563,"title":{},"body":{"components/MeComponent.html":{}}}],["me.component.scss",{"_index":564,"title":{},"body":{"components/MeComponent.html":{}}}],["mecomponent",{"_index":118,"title":{"components/MeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["media",{"_index":70,"title":{},"body":{"components/AppComponent.html":{}}}],["memory",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["menu",{"_index":452,"title":{},"body":{"components/LayoutComponent.html":{}}}],["metadata",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["method",{"_index":461,"title":{},"body":{"components/LayoutComponent.html":{}}}],["methods",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["mirrors",{"_index":655,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["mis",{"_index":612,"title":{},"body":{"components/MeComponent.html":{}}}],["miscellaneous",{"_index":1019,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mise",{"_index":615,"title":{},"body":{"components/MeComponent.html":{}}}],["mobile",{"_index":457,"title":{},"body":{"components/LayoutComponent.html":{},"injectables/ScreenService.html":{}}}],["modified",{"_index":943,"title":{},"body":{"injectables/UserService.html":{}}}],["modify",{"_index":1071,"title":{},"body":{"index.html":{}}}],["modules",{"_index":1073,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mot",{"_index":538,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["n'a",{"_index":722,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["n\\'a",{"_index":727,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["name",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["navigate",{"_index":429,"title":{},"body":{"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"index.html":{}}}],["navigating",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigation",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{}}}],["need",{"_index":847,"title":{},"body":{"injectables/ScreenService.html":{}}}],["needs",{"_index":952,"title":{},"body":{"interfaces/author.html":{}}}],["new",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["next",{"_index":388,"title":{},"body":{"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{},"miscellaneous/functions.html":{}}}],["ngclass",{"_index":468,"title":{},"body":{"components/LayoutComponent.html":{},"components/TopicComponent.html":{}}}],["ngondestroy",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["ngoninit",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["ngstyle",{"_index":897,"title":{},"body":{"components/TopicComponent.html":{}}}],["node.js",{"_index":1047,"title":{},"body":{"index.html":{}}}],["nom",{"_index":536,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["none",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["nouvel",{"_index":413,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["npm",{"_index":1049,"title":{},"body":{"index.html":{}}}],["null",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{}}}],["number",{"_index":292,"title":{},"body":{"interfaces/Comment.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}}}],["object",{"_index":737,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["observable",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/LayoutComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["observe(['(max",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["observer",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["ondestroy",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["onerror",{"_index":514,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["oninit",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["onsubmit",{"_index":349,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["ontogglesubscription",{"_index":887,"title":{},"body":{"components/TopicComponent.html":{}}}],["open",{"_index":483,"title":{},"body":{"components/LayoutComponent.html":{},"index.html":{}}}],["operations",{"_index":462,"title":{},"body":{"components/LayoutComponent.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["optional",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"miscellaneous/functions.html":{}}}],["original",{"_index":1034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["otherwise",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ScreenService.html":{}}}],["ou",{"_index":535,"title":{},"body":{"components/LoginComponent.html":{}}}],["out",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["outgoing",{"_index":1028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["output",{"_index":880,"title":{},"body":{"components/TopicComponent.html":{}}}],["outputs",{"_index":888,"title":{},"body":{"components/TopicComponent.html":{}}}],["overview",{"_index":1074,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1002,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["page'},{'name",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["page.component.html",{"_index":433,"title":{},"body":{"components/GreetingComponent.html":{}}}],["page.component.scss",{"_index":434,"title":{},"body":{"components/GreetingComponent.html":{}}}],["page.component.ts",{"_index":426,"title":{},"body":{"components/GreetingComponent.html":{},"coverage.html":{}}}],["page.component.ts:21",{"_index":440,"title":{},"body":{"components/GreetingComponent.html":{}}}],["page.component.ts:22",{"_index":436,"title":{},"body":{"components/GreetingComponent.html":{}}}],["page.component.ts:29",{"_index":437,"title":{},"body":{"components/GreetingComponent.html":{}}}],["page.component.ts:40",{"_index":438,"title":{},"body":{"components/GreetingComponent.html":{}}}],["page/greeting",{"_index":425,"title":{},"body":{"components/GreetingComponent.html":{},"coverage.html":{}}}],["pageable",{"_index":657,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["pages",{"_index":667,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["paginated",{"_index":653,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["pagination",{"_index":659,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["paging",{"_index":661,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["par",{"_index":811,"title":{},"body":{"components/PostsComponent.html":{}}}],["param",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":884,"title":{},"body":{"components/TopicComponent.html":{}}}],["pas",{"_index":723,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["passe",{"_index":539,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["password",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"components/MeComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["pathservice",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{}}}],["payload",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/PostRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["payloads",{"_index":640,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["pc",{"_index":458,"title":{},"body":{"components/LayoutComponent.html":{}}}],["persists",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipe",{"_index":796,"title":{},"body":{"components/PostsComponent.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["plus",{"_index":555,"title":{},"body":{"components/MeComponent.html":{}}}],["popup",{"_index":331,"title":{},"body":{"components/CreatepostComponent.html":{},"components/RegisterComponent.html":{}}}],["possibility",{"_index":554,"title":{},"body":{"components/MeComponent.html":{}}}],["post",{"_index":131,"title":{"interfaces/Post.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["post'},{'name",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["post.author.username",{"_index":685,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["post.comments",{"_index":719,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["post.comments?.length",{"_index":718,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["post.component.html",{"_index":676,"title":{},"body":{"components/PostComponent.html":{}}}],["post.component.scss",{"_index":677,"title":{},"body":{"components/PostComponent.html":{}}}],["post.content",{"_index":686,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["post.created_at",{"_index":683,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["post.title",{"_index":682,"title":{},"body":{"components/PostComponent.html":{},"components/PostDetailsComponent.html":{}}}],["post.topic.name",{"_index":716,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["post/post.component",{"_index":786,"title":{},"body":{"components/PostsComponent.html":{}}}],["post_id",{"_index":290,"title":{},"body":{"interfaces/Comment.html":{}}}],["postcomponent",{"_index":120,"title":{"components/PostComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["postdetails",{"_index":690,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["postdetails'},{'name",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["postdetails.component.html",{"_index":693,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["postdetails.component.scss",{"_index":694,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["postdetailscomponent",{"_index":122,"title":{"components/PostDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["postid",{"_index":696,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["postrequest",{"_index":376,"title":{"interfaces/PostRequest.html":{}},"body":{"components/CreatepostComponent.html":{},"interfaces/PostRequest.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["postresponse",{"_index":669,"title":{"interfaces/PostResponse.html":{}},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["posts",{"_index":430,"title":{},"body":{"components/GreetingComponent.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"interfaces/Topic.html":{},"interfaces/author.html":{}}}],["posts'},{'name",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["posts.component.html",{"_index":758,"title":{},"body":{"components/PostsComponent.html":{}}}],["posts.component.scss",{"_index":759,"title":{},"body":{"components/PostsComponent.html":{}}}],["posts.filter(p",{"_index":801,"title":{},"body":{"components/PostsComponent.html":{}}}],["postscomponent",{"_index":124,"title":{"components/PostsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["postservice",{"_index":323,"title":{"injectables/PostService.html":{}},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"coverage.html":{}}}],["postservice.addcomment",{"_index":702,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["postservice.createpost",{"_index":362,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["post’s",{"_index":646,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["prerequisites",{"_index":1046,"title":{},"body":{"index.html":{}}}],["presence",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["prevent",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["private",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["profil",{"_index":617,"title":{},"body":{"components/MeComponent.html":{}}}],["profile",{"_index":559,"title":{},"body":{"components/MeComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":38,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"properties.html":{}}}],["property",{"_index":294,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"components/TopicComponent.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["protected",{"_index":914,"title":{},"body":{"components/TopicsComponent.html":{}}}],["providedin",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["providehttpclient(withinterceptors([authinterceptor",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pu",{"_index":724,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["public",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/PostService.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{}}}],["queries",{"_index":654,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["query",{"_index":71,"title":{},"body":{"components/AppComponent.html":{}}}],["react",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["reactive",{"_index":326,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["reactiveformsmodule",{"_index":338,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["readonly",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["rebuild",{"_index":768,"title":{},"body":{"components/PostsComponent.html":{}}}],["received",{"_index":547,"title":{},"body":{"interfaces/LoginResponse.html":{}}}],["redirect",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{},"components/LayoutComponent.html":{}}}],["redirects",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["register",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"components/GreetingComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{}}}],["register'},{'name",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["register(registerrequest",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["register.component.html",{"_index":815,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.scss",{"_index":816,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registercomponent",{"_index":126,"title":{"components/RegisterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["registerform",{"_index":817,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registering",{"_index":843,"title":{},"body":{"interfaces/RegisterRequest.html":{}}}],["registerrequest",{"_index":239,"title":{"interfaces/RegisterRequest.html":{}},"body":{"injectables/AuthService.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"coverage.html":{}}}],["registers",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["registration",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"components/RegisterComponent.html":{}}}],["related",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{}}}],["reload",{"_index":577,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{},"index.html":{}}}],["reloadsubscriptions",{"_index":567,"title":{},"body":{"components/MeComponent.html":{}}}],["reloadtopics",{"_index":913,"title":{},"body":{"components/TopicsComponent.html":{}}}],["remark",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{}}}],["remarks",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{}}}],["removing",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":1055,"title":{},"body":{"index.html":{}}}],["reprensent",{"_index":931,"title":{},"body":{"interfaces/User.html":{}}}],["represents",{"_index":281,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"interfaces/Topic.html":{},"interfaces/author.html":{}}}],["req",{"_index":1029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["request",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/PostRequest.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"miscellaneous/functions.html":{}}}],["requests",{"_index":644,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"miscellaneous/functions.html":{}}}],["res.content",{"_index":793,"title":{},"body":{"components/PostsComponent.html":{}}}],["resdponse",{"_index":545,"title":{},"body":{"interfaces/LoginResponse.html":{}}}],["response",{"_index":544,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"interfaces/Subscription.html":{}}}],["response.token",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["responses",{"_index":649,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["responsible",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["responsive",{"_index":490,"title":{},"body":{"components/LayoutComponent.html":{}}}],["result",{"_index":333,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["results",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":319,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"interfaces/Subscription.html":{},"components/TopicsComponent.html":{}}}],["retrieves",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieving",{"_index":905,"title":{},"body":{"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["return",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":546,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/Subscription.html":{}}}],["returns",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["root'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["route",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/CommentRequest.html":{},"components/PostDetailsComponent.html":{}}}],["router",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["routerlink",{"_index":432,"title":{},"body":{"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{}}}],["routerlinkactive",{"_index":463,"title":{},"body":{"components/LayoutComponent.html":{}}}],["routermodule",{"_index":337,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostsComponent.html":{}}}],["routeroutlet",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/LayoutComponent.html":{}}}],["rules",{"_index":509,"title":{},"body":{"components/LoginComponent.html":{}}}],["run",{"_index":1062,"title":{},"body":{"index.html":{}}}],["running",{"_index":1068,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":829,"title":{},"body":{"components/RegisterComponent.html":{}}}],["récupér",{"_index":726,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["s'inscrire",{"_index":446,"title":{},"body":{"components/GreetingComponent.html":{},"components/RegisterComponent.html":{}}}],["s.topic_id",{"_index":800,"title":{},"body":{"components/PostsComponent.html":{}}}],["s\\'inscrire",{"_index":449,"title":{},"body":{"components/GreetingComponent.html":{},"components/RegisterComponent.html":{}}}],["sauvegarder",{"_index":627,"title":{},"body":{"components/MeComponent.html":{}}}],["screen",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{}}}],["screenservice",{"_index":24,"title":{"injectables/ScreenService.html":{}},"body":{"components/AppComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"coverage.html":{}}}],["se",{"_index":444,"title":{},"body":{"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/TopicComponent.html":{}}}],["second",{"_index":858,"title":{},"body":{"interfaces/Subscription.html":{}}}],["see",{"_index":756,"title":{},"body":{"components/PostsComponent.html":{}}}],["selector",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["send",{"_index":881,"title":{},"body":{"components/TopicComponent.html":{}}}],["sent",{"_index":308,"title":{},"body":{"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/PostRequest.html":{},"interfaces/RegisterRequest.html":{}}}],["server",{"_index":1067,"title":{},"body":{"index.html":{}}}],["service",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"injectables/UserService.html":{}}}],["serviceerror",{"_index":435,"title":{},"body":{"components/GreetingComponent.html":{}}}],["set",{"_index":454,"title":{},"body":{"components/LayoutComponent.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["set(subscriptions.map(s",{"_index":799,"title":{},"body":{"components/PostsComponent.html":{}}}],["sets",{"_index":519,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["setup",{"_index":1045,"title":{},"body":{"index.html":{}}}],["shape",{"_index":306,"title":{},"body":{"interfaces/CommentRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/Post.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"interfaces/User.html":{}}}],["show",{"_index":320,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["showing",{"_index":549,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicsComponent.html":{}}}],["sidenav",{"_index":475,"title":{},"body":{"components/LayoutComponent.html":{}}}],["size",{"_index":663,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["snack",{"_index":570,"title":{},"body":{"components/MeComponent.html":{}}}],["snackbar",{"_index":352,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["sort",{"_index":664,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["sorted",{"_index":775,"title":{},"body":{"components/PostsComponent.html":{}}}],["sortup",{"_index":767,"title":{},"body":{"components/PostsComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"injectables/ScreenService.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"index.html":{}}}],["specific",{"_index":283,"title":{},"body":{"interfaces/Comment.html":{}}}],["src/.../app.config.ts",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.interceptor.ts",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:21",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:22",{"_index":48,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:31",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:43",{"_index":55,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/interfaces/author.interface.ts",{"_index":947,"title":{},"body":{"interfaces/author.html":{},"coverage.html":{}}}],["src/app/core/interfaces/comment.interface.ts",{"_index":280,"title":{},"body":{"interfaces/Comment.html":{},"coverage.html":{}}}],["src/app/core/interfaces/commentrequest.interface.ts",{"_index":303,"title":{},"body":{"interfaces/CommentRequest.html":{},"coverage.html":{}}}],["src/app/core/interfaces/loginrequest.interface.ts",{"_index":541,"title":{},"body":{"interfaces/LoginRequest.html":{},"coverage.html":{}}}],["src/app/core/interfaces/loginresponse.interface.ts",{"_index":543,"title":{},"body":{"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["src/app/core/interfaces/post.interface.ts",{"_index":630,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"coverage.html":{}}}],["src/app/core/interfaces/postrequest.interface.ts",{"_index":728,"title":{},"body":{"interfaces/PostRequest.html":{},"coverage.html":{}}}],["src/app/core/interfaces/registerrequest.interface.ts",{"_index":842,"title":{},"body":{"interfaces/RegisterRequest.html":{},"coverage.html":{}}}],["src/app/core/interfaces/subscription.interface.ts",{"_index":853,"title":{},"body":{"interfaces/Subscription.html":{},"coverage.html":{}}}],["src/app/core/interfaces/topic.interface.ts",{"_index":875,"title":{},"body":{"interfaces/Topic.html":{},"coverage.html":{}}}],["src/app/core/interfaces/user.interface.ts",{"_index":930,"title":{},"body":{"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"coverage.html":{}}}],["src/app/core/services/auth.service.ts",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/core/services/auth.service.ts:23",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:24",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:31",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:39",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:49",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:65",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:73",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:80",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/post.service.ts",{"_index":729,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/app/core/services/post.service.ts:22",{"_index":734,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/core/services/post.service.ts:30",{"_index":738,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/core/services/post.service.ts:39",{"_index":740,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/core/services/post.service.ts:48",{"_index":742,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/core/services/post.service.ts:57",{"_index":736,"title":{},"body":{"injectables/PostService.html":{}}}],["src/app/core/services/screen.service.ts",{"_index":844,"title":{},"body":{"injectables/ScreenService.html":{},"coverage.html":{}}}],["src/app/core/services/screen.service.ts:14",{"_index":851,"title":{},"body":{"injectables/ScreenService.html":{}}}],["src/app/core/services/subscription.service.ts",{"_index":860,"title":{},"body":{"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["src/app/core/services/subscription.service.ts:20",{"_index":864,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/subscription.service.ts:28",{"_index":867,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/subscription.service.ts:37",{"_index":870,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/subscription.service.ts:45",{"_index":865,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/topic.service.ts",{"_index":904,"title":{},"body":{"injectables/TopicService.html":{},"coverage.html":{}}}],["src/app/core/services/topic.service.ts:18",{"_index":907,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/app/core/services/topic.service.ts:26",{"_index":908,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/app/core/services/user.service.ts",{"_index":934,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/core/services/user.service.ts:17",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/services/user.service.ts:25",{"_index":939,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/services/user.service.ts:34",{"_index":941,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/feature/auth/login/login.component.ts",{"_index":508,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/feature/auth/login/login.component.ts:39",{"_index":524,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/login/login.component.ts:40",{"_index":523,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/login/login.component.ts:41",{"_index":525,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/login/login.component.ts:42",{"_index":515,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/login/login.component.ts:49",{"_index":517,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/login/login.component.ts:60",{"_index":518,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/login/login.component.ts:75",{"_index":521,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/login/login.component.ts:94",{"_index":516,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts",{"_index":814,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/feature/auth/register/register.component.ts:33",{"_index":827,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts:34",{"_index":825,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts:35",{"_index":826,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts:36",{"_index":818,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts:46",{"_index":820,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts:57",{"_index":821,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts:71",{"_index":822,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/auth/register/register.component.ts:96",{"_index":819,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts",{"_index":314,"title":{},"body":{"components/CreatepostComponent.html":{},"coverage.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts:33",{"_index":363,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts:34",{"_index":365,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts:35",{"_index":353,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts:44",{"_index":357,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts:55",{"_index":358,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts:63",{"_index":359,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["src/app/feature/posts/createpost/createpost.component.ts:87",{"_index":354,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts",{"_index":751,"title":{},"body":{"components/PostsComponent.html":{},"coverage.html":{}}}],["src/app/feature/posts/main/posts.component.ts:35",{"_index":779,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:36",{"_index":780,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:37",{"_index":778,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:38",{"_index":781,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:39",{"_index":764,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:50",{"_index":769,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:62",{"_index":770,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:77",{"_index":771,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/main/posts.component.ts:97",{"_index":765,"title":{},"body":{"components/PostsComponent.html":{}}}],["src/app/feature/posts/post/post.component.ts",{"_index":670,"title":{},"body":{"components/PostComponent.html":{},"coverage.html":{}}}],["src/app/feature/posts/post/post.component.ts:22",{"_index":679,"title":{},"body":{"components/PostComponent.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts",{"_index":687,"title":{},"body":{"components/PostDetailsComponent.html":{},"coverage.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts:33",{"_index":704,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts:34",{"_index":703,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts:35",{"_index":705,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts:36",{"_index":698,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts:43",{"_index":699,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts:55",{"_index":700,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["src/app/feature/posts/postdetails/postdetails.component.ts:70",{"_index":701,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["src/app/feature/topics/main/topics.component.ts",{"_index":910,"title":{},"body":{"components/TopicsComponent.html":{},"coverage.html":{}}}],["src/app/feature/topics/main/topics.component.ts:27",{"_index":923,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/feature/topics/main/topics.component.ts:29",{"_index":916,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/feature/topics/main/topics.component.ts:42",{"_index":918,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/feature/topics/main/topics.component.ts:50",{"_index":917,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/feature/topics/main/topics.component.ts:58",{"_index":921,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/feature/topics/main/topics.component.ts:74",{"_index":922,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/feature/topics/main/topics.component.ts:90",{"_index":919,"title":{},"body":{"components/TopicsComponent.html":{}}}],["src/app/feature/topics/topic/topic.component.ts",{"_index":879,"title":{},"body":{"components/TopicComponent.html":{},"coverage.html":{}}}],["src/app/feature/topics/topic/topic.component.ts:21",{"_index":889,"title":{},"body":{"components/TopicComponent.html":{}}}],["src/app/feature/topics/topic/topic.component.ts:23",{"_index":891,"title":{},"body":{"components/TopicComponent.html":{}}}],["src/app/feature/topics/topic/topic.component.ts:24",{"_index":892,"title":{},"body":{"components/TopicComponent.html":{}}}],["src/app/feature/topics/topic/topic.component.ts:31",{"_index":893,"title":{},"body":{"components/TopicComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts",{"_index":548,"title":{},"body":{"components/MeComponent.html":{},"coverage.html":{}}}],["src/app/feature/user/component/me/me.component.ts:111",{"_index":576,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:121",{"_index":580,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:38",{"_index":584,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:39",{"_index":582,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:40",{"_index":583,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:41",{"_index":585,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:42",{"_index":571,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:55",{"_index":572,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:65",{"_index":573,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/feature/user/component/me/me.component.ts:87",{"_index":574,"title":{},"body":{"components/MeComponent.html":{}}}],["src/app/guards/auth.guards.ts",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/guards/auth.guards.ts:23",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/guards/auth.guards.ts:9",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/interceptors/auth.interceptor.ts",{"_index":996,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/shared/greeting",{"_index":424,"title":{},"body":{"components/GreetingComponent.html":{},"coverage.html":{}}}],["src/app/shared/layout/layout.component.ts",{"_index":450,"title":{},"body":{"components/LayoutComponent.html":{},"coverage.html":{}}}],["src/app/shared/layout/layout.component.ts:29",{"_index":491,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:31",{"_index":488,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:32",{"_index":485,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:33",{"_index":484,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:34",{"_index":478,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:42",{"_index":480,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:53",{"_index":481,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:62",{"_index":482,"title":{},"body":{"components/LayoutComponent.html":{}}}],["src/app/shared/layout/layout.component.ts:74",{"_index":479,"title":{},"body":{"components/LayoutComponent.html":{}}}],["standalone",{"_index":510,"title":{},"body":{"components/LoginComponent.html":{},"components/MeComponent.html":{}}}],["started",{"_index":1036,"title":{"index.html":{}},"body":{"index.html":{}}}],["startonce",{"_index":1066,"title":{},"body":{"index.html":{}}}],["state",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["statements",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{}}}],["stored",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["stream",{"_index":1032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/LayoutComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"injectables/TopicService.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurl",{"_index":344,"title":{},"body":{"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["styleurls",{"_index":33,"title":{},"body":{"components/AppComponent.html":{}}}],["subject",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["submit",{"_index":324,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["submited",{"_index":526,"title":{},"body":{"components/LoginComponent.html":{}}}],["subscribe",{"_index":387,"title":{},"body":{"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["subscribe(flag",{"_index":498,"title":{},"body":{"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["subscribe(id",{"_index":866,"title":{},"body":{"injectables/SubscriptionService.html":{},"components/TopicsComponent.html":{}}}],["subscribe(result",{"_index":98,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribed",{"_index":752,"title":{},"body":{"components/PostsComponent.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{}}}],["subscribedpost",{"_index":798,"title":{},"body":{"components/PostsComponent.html":{}}}],["subscribedpost.has(p.topic.id",{"_index":802,"title":{},"body":{"components/PostsComponent.html":{}}}],["subscribes",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["subscribing",{"_index":861,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["subscription",{"_index":578,"title":{"interfaces/Subscription.html":{}},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["subscriptions",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"components/TopicsComponent.html":{}}}],["subscriptionservice",{"_index":560,"title":{"injectables/SubscriptionService.html":{}},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{},"injectables/SubscriptionService.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["successful",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{}}}],["succès",{"_index":392,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{}}}],["summary",{"_index":637,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["suppression",{"_index":625,"title":{},"body":{"components/MeComponent.html":{}}}],["sélectionner",{"_index":415,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["s’abonner",{"_index":903,"title":{},"body":{"components/TopicComponent.html":{}}}],["table",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["takeuntil(this.destroy",{"_index":620,"title":{},"body":{"components/MeComponent.html":{},"components/PostsComponent.html":{}}}],["tap",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatepostComponent.html":{}}}],["tap((response",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["templateurl",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["text",{"_index":296,"title":{},"body":{"interfaces/Comment.html":{}}}],["thier",{"_index":551,"title":{},"body":{"components/MeComponent.html":{}}}],["this.authservice.isloggedin",{"_index":442,"title":{},"body":{"components/GreetingComponent.html":{}}}],["this.authservice.isloggedin$().pipe",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authservice.login(loginrequest",{"_index":528,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.logout",{"_index":503,"title":{},"body":{"components/LayoutComponent.html":{}}}],["this.authservice.register(registerrequest",{"_index":833,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.buildform",{"_index":381,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.commentform",{"_index":712,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.commentform.reset",{"_index":715,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.commentform.value",{"_index":713,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.createpostform",{"_index":404,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["this.createpostform.invalid",{"_index":382,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["this.createpostform.markallastouched",{"_index":383,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["this.createpostform.value",{"_index":385,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["this.destroy$.complete",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["this.destroy$.next",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["this.errormessage",{"_index":600,"title":{},"body":{"components/MeComponent.html":{}}}],["this.fb.group",{"_index":594,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{}}}],["this.filteredposts",{"_index":795,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.formbuilder.group",{"_index":405,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.http.post(`${this.pathservice}/login",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.post(`${this.pathservice}/register",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.httpclient.delete(`${this.pathservice}/unsubscribe/${id",{"_index":873,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.httpclient.get('/api/user/me",{"_index":945,"title":{},"body":{"injectables/UserService.html":{}}}],["this.httpclient.get('api/subscription",{"_index":874,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.httpclient.get(`${this.pathservice}/${id",{"_index":749,"title":{},"body":{"injectables/PostService.html":{}}}],["this.httpclient.get(this.pathservice",{"_index":747,"title":{},"body":{"injectables/PostService.html":{},"injectables/TopicService.html":{}}}],["this.httpclient.post(`${this.pathservice}/${id}/comments",{"_index":750,"title":{},"body":{"injectables/PostService.html":{}}}],["this.httpclient.post(`${this.pathservice}/subscribe/${id",{"_index":872,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.httpclient.post(this.pathservice",{"_index":748,"title":{},"body":{"injectables/PostService.html":{}}}],["this.httpclient.put('/api/user",{"_index":946,"title":{},"body":{"injectables/UserService.html":{}}}],["this.iscollapsed",{"_index":501,"title":{},"body":{"components/LayoutComponent.html":{}}}],["this.isloggedsubject.asobservable",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloggedsubject.next(false",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloggedsubject.next(true",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ismobile",{"_index":499,"title":{},"body":{"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.issortup",{"_index":809,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.loginform",{"_index":531,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.value",{"_index":527,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.observer",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["this.onerror",{"_index":530,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.post",{"_index":710,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.postid",{"_index":708,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.posts",{"_index":790,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.postservice.addcomment(this.postid",{"_index":714,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.postservice.all().pipe",{"_index":791,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.postservice.createpost(postrequest",{"_index":386,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["this.postservice.getpost(this.postid",{"_index":711,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.registerform",{"_index":837,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.invalid",{"_index":830,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.markallastouched",{"_index":831,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.value",{"_index":832,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.reloadsubscriptions",{"_index":599,"title":{},"body":{"components/MeComponent.html":{}}}],["this.reloadtopics",{"_index":926,"title":{},"body":{"components/TopicsComponent.html":{}}}],["this.route.snapshot.parammap.get('id",{"_index":709,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["this.router.createurltree(['/greeting",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.router.navigate([\"/greeting",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router.navigate(['/greeting",{"_index":504,"title":{},"body":{"components/LayoutComponent.html":{}}}],["this.router.navigate(['/login",{"_index":834,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.router.navigate(['/posts",{"_index":396,"title":{},"body":{"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LoginComponent.html":{}}}],["this.screenservice.ismobile",{"_index":497,"title":{},"body":{"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.screenservice.ismobile$.next(result.matches",{"_index":99,"title":{},"body":{"components/AppComponent.html":{}}}],["this.serviceerror",{"_index":443,"title":{},"body":{"components/GreetingComponent.html":{}}}],["this.sidenav.open",{"_index":502,"title":{},"body":{"components/LayoutComponent.html":{}}}],["this.sidenav.toggle",{"_index":500,"title":{},"body":{"components/LayoutComponent.html":{}}}],["this.snack.open(\"erreur",{"_index":614,"title":{},"body":{"components/MeComponent.html":{}}}],["this.snack.open(\"profil",{"_index":610,"title":{},"body":{"components/MeComponent.html":{}}}],["this.snackbar.open('article",{"_index":389,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["this.snackbar.open('compte",{"_index":835,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.snackbar.open('erreur",{"_index":398,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["this.subscribe.emit(this.topic.id",{"_index":900,"title":{},"body":{"components/TopicComponent.html":{}}}],["this.subscriptions",{"_index":788,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.subscriptionservice.all",{"_index":789,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.subscriptionservice.subscribe(id",{"_index":925,"title":{},"body":{"components/TopicsComponent.html":{}}}],["this.subscriptionservice.unsubscribe(id",{"_index":928,"title":{},"body":{"components/TopicsComponent.html":{}}}],["this.subscriptionservice.unsubscribe(topicid",{"_index":624,"title":{},"body":{"components/MeComponent.html":{}}}],["this.topic.subscribed",{"_index":898,"title":{},"body":{"components/TopicComponent.html":{}}}],["this.topics",{"_index":618,"title":{},"body":{"components/MeComponent.html":{},"components/TopicsComponent.html":{}}}],["this.topicservice.all",{"_index":364,"title":{},"body":{"components/CreatepostComponent.html":{},"components/TopicsComponent.html":{}}}],["this.topicservice.all().pipe",{"_index":619,"title":{},"body":{"components/MeComponent.html":{}}}],["this.unsubscribe.emit(this.topic.id",{"_index":899,"title":{},"body":{"components/TopicComponent.html":{}}}],["this.updatefilteredposts",{"_index":794,"title":{},"body":{"components/PostsComponent.html":{}}}],["this.userform",{"_index":593,"title":{},"body":{"components/MeComponent.html":{}}}],["this.userform.invalid",{"_index":603,"title":{},"body":{"components/MeComponent.html":{}}}],["this.userform.markallastouched",{"_index":604,"title":{},"body":{"components/MeComponent.html":{}}}],["this.userform.value",{"_index":606,"title":{},"body":{"components/MeComponent.html":{}}}],["this.userservice.getme",{"_index":592,"title":{},"body":{"components/MeComponent.html":{}}}],["this.userservice.update(userupdate",{"_index":609,"title":{},"body":{"components/MeComponent.html":{}}}],["throws",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["thème",{"_index":416,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["thèmes",{"_index":507,"title":{},"body":{"components/LayoutComponent.html":{}}}],["timestamp",{"_index":297,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["title",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/LayoutComponent.html":{},"interfaces/Post.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{}}}],["titre",{"_index":420,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["tje",{"_index":823,"title":{},"body":{"components/RegisterComponent.html":{}}}],["togglemenu",{"_index":476,"title":{},"body":{"components/LayoutComponent.html":{}}}],["token",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{},"miscellaneous/functions.html":{}}}],["topic",{"_index":321,"title":{"interfaces/Topic.html":{}},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"components/PostsComponent.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["topic'},{'name",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["topic.component.html",{"_index":885,"title":{},"body":{"components/TopicComponent.html":{}}}],["topic.component.scss",{"_index":886,"title":{},"body":{"components/TopicComponent.html":{}}}],["topic.description",{"_index":901,"title":{},"body":{"components/TopicComponent.html":{}}}],["topic.interface",{"_index":642,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["topic.name",{"_index":419,"title":{},"body":{"components/CreatepostComponent.html":{},"components/TopicComponent.html":{}}}],["topic.subscribed",{"_index":623,"title":{},"body":{"components/MeComponent.html":{},"components/TopicComponent.html":{}}}],["topic/topic.component",{"_index":924,"title":{},"body":{"components/TopicsComponent.html":{}}}],["topic_id",{"_index":406,"title":{},"body":{"components/CreatepostComponent.html":{},"interfaces/Subscription.html":{}}}],["topic_name",{"_index":855,"title":{},"body":{"interfaces/Subscription.html":{}}}],["topiccomponent",{"_index":128,"title":{"components/TopicComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["topicid",{"_index":581,"title":{},"body":{"components/MeComponent.html":{},"interfaces/PostRequest.html":{}}}],["topics",{"_index":347,"title":{},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{}}}],["topics.component.html",{"_index":911,"title":{},"body":{"components/TopicsComponent.html":{}}}],["topics.component.scss",{"_index":912,"title":{},"body":{"components/TopicsComponent.html":{}}}],["topics.filter(topic",{"_index":622,"title":{},"body":{"components/MeComponent.html":{}}}],["topics/topic/topic.component",{"_index":590,"title":{},"body":{"components/MeComponent.html":{}}}],["topicscomponent",{"_index":130,"title":{"components/TopicsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["topicservice",{"_index":318,"title":{"injectables/TopicService.html":{}},"body":{"components/CreatepostComponent.html":{},"components/MeComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"coverage.html":{}}}],["total",{"_index":666,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["totalelements",{"_index":665,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["totalpages",{"_index":668,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["track",{"_index":418,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["transfer",{"_index":948,"title":{},"body":{"interfaces/author.html":{}}}],["tre",{"_index":725,"title":{},"body":{"components/PostDetailsComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["trier",{"_index":810,"title":{},"body":{"components/PostsComponent.html":{}}}],["true",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{}}}],["try",{"_index":933,"title":{},"body":{"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{}}}],["tslib",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":427,"title":{},"body":{"components/GreetingComponent.html":{},"components/PostsComponent.html":{}}}],["type",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"interfaces/CommentRequest.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"interfaces/Post.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"interfaces/PostRequest.html":{},"interfaces/PostResponse.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":1043,"title":{},"body":{"index.html":{}}}],["un",{"_index":412,"title":{},"body":{"components/CreatepostComponent.html":{},"components/PostsComponent.html":{}}}],["undefined",{"_index":643,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["unique",{"_index":295,"title":{},"body":{"interfaces/Comment.html":{},"interfaces/Post.html":{},"interfaces/PostResponse.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}}}],["unsubscribe",{"_index":561,"title":{},"body":{"components/MeComponent.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["unsubscribe(id",{"_index":869,"title":{},"body":{"injectables/SubscriptionService.html":{},"components/TopicsComponent.html":{}}}],["unsubscribe(topicid",{"_index":579,"title":{},"body":{"components/MeComponent.html":{}}}],["unsusbscribe",{"_index":556,"title":{},"body":{"components/MeComponent.html":{}}}],["up",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicsComponent.html":{}}}],["update",{"_index":558,"title":{},"body":{"components/MeComponent.html":{},"injectables/UserService.html":{}}}],["update(userupdate",{"_index":940,"title":{},"body":{"injectables/UserService.html":{}}}],["updatefilteredposts",{"_index":763,"title":{},"body":{"components/PostsComponent.html":{}}}],["updating",{"_index":935,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{}}}],["urltree",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{}}}],["use",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{}}}],["used",{"_index":284,"title":{},"body":{"interfaces/Comment.html":{},"components/LayoutComponent.html":{},"interfaces/LoginResponse.html":{},"components/MeComponent.html":{},"injectables/ScreenService.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"interfaces/author.html":{}}}],["user",{"_index":150,"title":{"interfaces/User.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Comment.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginRequest.html":{},"components/MeComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/Topic.html":{},"components/TopicsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"coverage.html":{}}}],["user_id",{"_index":859,"title":{},"body":{"interfaces/Subscription.html":{}}}],["userform",{"_index":566,"title":{},"body":{"components/MeComponent.html":{}}}],["userinformations",{"_index":942,"title":{},"body":{"injectables/UserService.html":{}}}],["username",{"_index":552,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{},"interfaces/RegisterRequest.html":{},"interfaces/User.html":{},"interfaces/UserUpdateRequest.html":{},"interfaces/author.html":{}}}],["userservice",{"_index":557,"title":{"injectables/UserService.html":{}},"body":{"components/MeComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userservice.update",{"_index":575,"title":{},"body":{"components/MeComponent.html":{}}}],["userupdate",{"_index":605,"title":{},"body":{"components/MeComponent.html":{},"injectables/UserService.html":{}}}],["userupdate.password",{"_index":607,"title":{},"body":{"components/MeComponent.html":{}}}],["userupdaterequest",{"_index":586,"title":{"interfaces/UserUpdateRequest.html":{}},"body":{"components/MeComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"interfaces/UserUpdateRequest.html":{},"coverage.html":{}}}],["uses",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/SubscriptionService.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["utilisateur",{"_index":611,"title":{},"body":{"components/MeComponent.html":{}}}],["utilisateur@if",{"_index":629,"title":{},"body":{"components/MeComponent.html":{}}}],["v22.14",{"_index":1048,"title":{},"body":{"index.html":{}}}],["validation",{"_index":328,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["validators",{"_index":367,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.email",{"_index":598,"title":{},"body":{"components/MeComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.max(5000",{"_index":409,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["validators.min(10",{"_index":408,"title":{},"body":{"components/CreatepostComponent.html":{}}}],["validators.min(12",{"_index":532,"title":{},"body":{"components/LoginComponent.html":{}}}],["validators.min(8",{"_index":838,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.minlength(3",{"_index":596,"title":{},"body":{"components/MeComponent.html":{},"components/PostDetailsComponent.html":{}}}],["validators.required",{"_index":407,"title":{},"body":{"components/CreatepostComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"components/RegisterComponent.html":{}}}],["value",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"injectables/ScreenService.html":{},"injectables/SubscriptionService.html":{},"components/TopicComponent.html":{},"injectables/TopicService.html":{},"components/TopicsComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":773,"title":{},"body":{"components/PostsComponent.html":{}}}],["var",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostComponent.html":{},"components/PostDetailsComponent.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["variable",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1079,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1041,"title":{},"body":{"index.html":{},"properties.html":{}}}],["view",{"_index":459,"title":{},"body":{"components/LayoutComponent.html":{}}}],["viewchild",{"_index":492,"title":{},"body":{"components/LayoutComponent.html":{}}}],["viewchild(matsidenav",{"_index":487,"title":{},"body":{"components/LayoutComponent.html":{}}}],["viewport",{"_index":852,"title":{},"body":{"injectables/ScreenService.html":{}}}],["void",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CreatepostComponent.html":{},"components/GreetingComponent.html":{},"components/LayoutComponent.html":{},"components/LoginComponent.html":{},"components/MeComponent.html":{},"components/PostDetailsComponent.html":{},"injectables/PostService.html":{},"components/PostsComponent.html":{},"components/RegisterComponent.html":{},"components/TopicComponent.html":{},"components/TopicsComponent.html":{}}}],["vs",{"_index":638,"title":{},"body":{"interfaces/Post.html":{},"interfaces/PostResponse.html":{}}}],["whenever",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["whether",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Topic.html":{}}}],["whole",{"_index":1063,"title":{},"body":{"index.html":{}}}],["width",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["working",{"_index":950,"title":{},"body":{"interfaces/author.html":{},"index.html":{}}}],["zone.js",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        Root component of the application\n\nUse BreakpointObserver to follow the change on the screen width and emit true in isMobile$ Observable of the screenService\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                \n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(observer: BreakpointObserver, screenService: ScreenService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        observer\n                                                  \n                                                        \n                                                                    BreakpointObserver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        screenService\n                                                  \n                                                        \n                                                                        ScreenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Initializes the component\n\nEmit a new value whenever the media query match status changes\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Mdd\"\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router, RouterOutlet } from '@angular/router';\nimport { AuthService } from './core/services/auth.service';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Subject, takeUntil } from 'rxjs';\nimport { ScreenService } from './core/services/screen.service';\n\n\n/**\n * Root component of the application\n * @remark\n * - Use `BreakpointObserver` to follow the change on the screen width and emit true in isMobile$ Observable of the screenService\n */\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  templateUrl: 'app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  title = \"Mdd\";\n  private destroy$ = new Subject();\n\n  constructor(private observer: BreakpointObserver, private screenService: ScreenService) { }\n\n  /**\n   * Initializes the component\n   * \n   *  - Emit a new value whenever the media query match status changes\n   */\n  ngOnInit(): void {\n    this.observer\n      .observe(['(max-width: 800px)'])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(result => {\n        this.screenService.isMobile$.next(result.matches);\n      });\n  }\n\n  /**\n    * Cleans up any active subscriptions to prevent memory leaks.\n    */\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n    \n\n    \n        \n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/guards/auth.guards.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/guards/auth.guards.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/guards/auth.guards.ts:23\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated.\nSubscribes to authService.isLoggedIn$(), and:\n\nIf the user is authenticated (true), allows navigation.\n\nIf the user is not authenticated (false), returns a UrlTree that redirects to /greeting.\n\ntrue to allow navigation, or\n\na UrlTree to redirect the user to the greeting page.\n\n\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting either:\n\ntrue to allow navigation, or\na UrlTree to redirect the user to the greeting page.\n\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from \"@angular/core\";\nimport { AuthService } from \"../core/services/auth.service\";\nimport { CanActivate, Router, UrlTree } from \"@angular/router\";\nimport { map, Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n    constructor(private authService: AuthService, private router: Router) { }\n\n    /**\n      * Determines whether a route can be activated.\n      *\n      * Subscribes to `authService.isLoggedIn$()`, and:\n      * - If the user is authenticated (`true`), allows navigation.\n      * - If the user is not authenticated (`false`), returns a UrlTree that redirects to `/greeting`.\n      *\n      * @returns An Observable emitting either:\n      *  - `true` to allow navigation, or\n      *  - a `UrlTree` to redirect the user to the greeting page.\n      */\n    canActivate(): Observable {\n        return this.authService.isLoggedIn$().pipe(\n            map(isLogged => {\n                return isLogged ? true : this.router.createUrlTree(['/greeting']);\n            })\n        );\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling user authentication and registration,\nand exposing an observable for components to react to login state changes.\n\nUses Angular’s HttpClient to interact with /api/auth endpoints.\nManages a BehaviorSubject to broadcast the current login status.\nPersists the JWT token in localStorage and clears it on logout.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isLoggedSubject\n                            \n                            \n                                    Readonly\n                                pathService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getToken\n                            \n                            \n                                    Private\n                                hasToken\n                            \n                            \n                                isLoggedIn$\n                            \n                            \n                                    Public\n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/auth.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getToken\n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Retrieves the current JWT from localStorage.\n\n\n                        \n                            Returns :     string | null\n\n                        \n                            \n                                The JWT string, or null if none is stored.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Checks for the presence of a JWT in localStorage.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true if a token exists; false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn$\n                        \n                    \n                \n            \n            \n                \nisLoggedIn$()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Returns an observable that emits true when the user is logged in\nor false otherwise.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(credentials: LoginRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Attempts to authenticate the user with given credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                credentials\n                                            \n                                                            LoginRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    – The login payload containing identifier and password.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits true on successful login, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Logs the user out by removing the JWT and navigating to the greeting page.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerRequest: RegisterRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerRequest\n                                            \n                                                            RegisterRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    – The registration payload.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable completing when the backend confirms registration.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isLoggedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(this.hasToken())\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pathService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/auth'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/auth.service.ts:23\n                        \n                    \n\n            \n                \n                    Base URL for authentication-related API calls.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { LoginRequest } from '../../core/interfaces/loginRequest.interface';\nimport { BehaviorSubject, map, Observable, tap } from 'rxjs';\nimport { LoginResponse } from '../../core/interfaces/loginResponse.interface';\nimport { Router } from '@angular/router';\nimport { RegisterRequest } from '../interfaces/registerRequest.interface';\n\n/**\n * Service responsible for handling user authentication and registration,\n * and exposing an observable for components to react to login state changes.\n *\n * @remarks\n * - Uses Angular’s `HttpClient` to interact with `/api/auth` endpoints.  \n * - Manages a `BehaviorSubject` to broadcast the current login status.  \n * - Persists the JWT token in `localStorage` and clears it on logout.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Base URL for authentication-related API calls. */\n  readonly pathService = '/api/auth';\n  private isLoggedSubject = new BehaviorSubject(this.hasToken());\n  constructor(private http: HttpClient, private router: Router) { }\n\n  /**\n  * Returns an observable that emits `true` when the user is logged in\n  * or `false` otherwise.\n  */\n  isLoggedIn$() {\n    return this.isLoggedSubject.asObservable();\n  }\n\n  /**\n  * Checks for the presence of a JWT in localStorage.\n  * @returns `true` if a token exists; `false` otherwise.\n  */\n  private hasToken(): boolean {\n    return !!localStorage.getItem('jwt');\n  }\n\n  /**\n  * Attempts to authenticate the user with given credentials.\n  * @param credentials – The login payload containing identifier and password.\n  * @returns An `Observable` that emits `true` on successful login, `false` otherwise.\n  * @throws HttpErrorResponse if the HTTP request fails.\n  */\n  public login(credentials: LoginRequest): Observable {\n    return this.http.post(`${this.pathService}/login`, credentials).pipe(\n      tap((response) => {\n        localStorage.setItem('jwt', response.token);\n        this.isLoggedSubject.next(true);\n      }),\n      map((response) => !!response.token)\n    );\n  }\n\n  /**\n  * Registers a new user.\n  * @param registerRequest – The registration payload.\n  * @returns An `Observable` completing when the backend confirms registration.\n  * @throws HttpErrorResponse if the HTTP request fails.\n  */\n  public register(registerRequest: RegisterRequest): Observable {\n    return this.http.post(`${this.pathService}/register`, registerRequest);\n  }\n\n  /**\n  * Retrieves the current JWT from localStorage.\n  * @returns The JWT string, or `null` if none is stored.\n  */\n  getToken(): string | null {\n    return localStorage.getItem('jwt');\n  }\n\n  /**\n  * Logs the user out by removing the JWT and navigating to the greeting page.\n  */\n  logout(): void {\n    localStorage.removeItem('jwt');\n    this.isLoggedSubject.next(false);\n    this.router.navigate([\"/greeting\"]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Comment.html":{"url":"interfaces/Comment.html","title":"interface - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/comment.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a comment made by a user on a specific post used to display the comment into application\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            created_at\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            post_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:         author\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         author\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        created_at:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        post_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        post_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { author } from \"./author.interface\";\n\n/**\n * Represents a comment made by a user on a specific post used to display the comment into application\n *\n * @property id – Unique identifier of the comment.  \n * @property content – Text content of the comment.  \n * @property created_at – Timestamp of when the comment was created.  \n * @property author – Information about the comment’s author.  \n * @property post_id – Identifier of the post to which this comment belongs.\n *\n */\nexport interface Comment {\n    id: number;\n    content: string;\n    created_at: Date;\n    author: author;\n    post_id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommentRequest.html":{"url":"interfaces/CommentRequest.html","title":"interface - CommentRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommentRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/commentRequest.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Request payload for creating a new comment.\nThis interface defines the shape of the data sent to the backend when\nadding a comment to a post. It only includes the content field since\nthe post identifier and author are determined by the route and authentication context.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CommentRequest {\n    \"content\": string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreatepostComponent.html":{"url":"components/CreatepostComponent.html","title":"component - CreatepostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CreatepostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/posts/createpost/createpost.component.ts\n\n\n\n    \n        Description\n    \n    \n        Displays a page that enable the user to add a new Post.\n\nUses TopicService to retrieve and show the Topic list\nUses PostService to submit the new post request\nBuilds a reactive FormGroup with validation constraints for the new post\nUses MatSnackBar to popup the user about the creation result\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-createpost\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            AsyncPipe\n                            RouterModule\n                            ReactiveFormsModule\n                            MatIconModule\n                            MatFormFieldModule\n                            MatSelectModule\n                            MatInputModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./createpost.component.html\n            \n\n\n\n            \n                styleUrl\n                ./createpost.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createPostForm\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                topics$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, router: Router, topicService: TopicService, postService: PostService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/feature/posts/createpost/createpost.component.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/createpost/createpost.component.ts:87\n                        \n                    \n\n\n            \n                \n                        Build the form with its constraints\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/createpost/createpost.component.ts:44\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/createpost/createpost.component.ts:55\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nBuild createPostForm\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/createpost/createpost.component.ts:63\n                        \n                    \n\n\n            \n                \n                        Enable the user to create a new post\nSubmit the form by calling postService.createPost\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createPostForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/createpost/createpost.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/createpost/createpost.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topics$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.topicService.all()\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/createpost/createpost.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { AsyncPipe, CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatFormField, MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select'\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router, RouterModule } from '@angular/router';\nimport { PostRequest } from 'app/core/interfaces/postRequest.interface';\nimport { Topic } from 'app/core/interfaces/topic.interface';\nimport { PostService } from 'app/core/services/post.service';\nimport { TopicService } from 'app/core/services/topic.service';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\n/**\n * Displays a page that enable the user to add a new Post.\n *\n * @remarks\n * - Uses `TopicService` to retrieve and show the Topic list\n * - Uses `PostService` to submit the new post request\n * - Builds a reactive `FormGroup` with validation constraints for the new post\n * - Uses `MatSnackBar` to popup the user about the creation result\n */\n@Component({\n  selector: 'app-createpost',\n  imports: [CommonModule, AsyncPipe, RouterModule, ReactiveFormsModule, MatIconModule, MatFormFieldModule, MatSelectModule, MatInputModule],\n  templateUrl: './createpost.component.html',\n  styleUrl: './createpost.component.scss'\n})\nexport class CreatepostComponent implements OnInit, OnDestroy {\n  createPostForm!: FormGroup;\n  topics$: Observable = this.topicService.all();\n  private destroy$ = new Subject();\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private topicService: TopicService, private postService: PostService, private snackBar: MatSnackBar) {\n\n  }\n\n  /**\n  * Cleans up any active subscriptions to prevent memory leaks.\n  */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n\n  }\n\n  /**\n  * Initializes the component.\n  *\n  * - Build `createPostForm`\n  */\n  ngOnInit(): void {\n    this.buildForm();\n  }\n\n  /**\n  * Enable the user to create a new post\n  * Submit the form by calling postService.createPost\n  */\n  onSubmit() {\n    if (this.createPostForm.invalid) {\n      this.createPostForm.markAllAsTouched();\n      return;\n    }\n\n    const postRequest: PostRequest = this.createPostForm.value as PostRequest;\n    this.postService.createPost(postRequest)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.snackBar.open('Article créé avec succès', 'Fermer', { duration: 5000 });\n          this.router.navigate(['/posts']);\n        },\n        error: () => {\n          this.snackBar.open('Erreur lors de la création de l\\'article', 'Fermer', { duration: 5000 });\n        }\n      }\n      );\n  }\n\n  /**\n  * Build the form with its constraints\n  */\n  private buildForm() {\n    this.createPostForm = this.formBuilder.group({\n      topic_id: [\n        '',\n        [\n          Validators.required,\n        ]\n      ],\n      title: [\n        '',\n        [\n          Validators.required,\n        ]\n      ],\n      content: [\n        '',\n        [\n          Validators.required,\n          Validators.min(10),\n          Validators.max(5000)\n        ]\n      ]\n    });\n  }\n\n\n}\n\n    \n\n    \n        \n    \n        \n            arrow_back\n        \n    \n    Créer un nouvel article\n\n\n@if (createPostForm){\n\n    \n        \n            Sélectionner un thème\n            \n                @for (topic of topics$ | async; track topic) {\n                {{topic.name}}\n                }\n            \n        \n    \n    \n        \n            Titre de l'article\n            \n        \n    \n    \n        \n            Contenu de l'article\n            \n        \n    \n    \n        \n            Créer\n        \n    \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        arrow_back                Créer un nouvel article@if (createPostForm){                        Sélectionner un thème                            @for (topic of topics$ | async; track topic) {                {{topic.name}}                }                                                Titre de l\\'article                                                Contenu de l\\'article                                                Créer            }'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CreatepostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GreetingComponent.html":{"url":"components/GreetingComponent.html","title":"component - GreetingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  GreetingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/greeting-page/greeting-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        The component displays a greeting page with two buton: login and register\n\nuse Router to navigate to /posts page if the user is already logged in\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-greeting-page\n            \n\n\n            \n                imports\n                \n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./greeting-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./greeting-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                serviceError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/greeting-page/greeting-page.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/greeting-page/greeting-page.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/greeting-page/greeting-page.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nsubscribe to loggedIn status\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/greeting-page/greeting-page.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serviceError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/greeting-page/greeting-page.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router, RouterLink } from '@angular/router';\nimport { AuthService } from 'app/core/services/auth.service';\nimport { Subject, takeUntil } from 'rxjs';\n\n\n/**\n * The component displays a greeting page with two buton: login and register\n * @remark\n * - use `Router` to navigate to /posts page if the user is already logged in\n *\n */\n@Component({\n  selector: 'app-greeting-page',\n  imports: [RouterLink],\n  templateUrl: './greeting-page.component.html',\n  styleUrl: './greeting-page.component.scss'\n})\nexport class GreetingComponent implements OnInit, OnDestroy {\n\n  serviceError = false;\n  private destroy$ = new Subject();\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  /**\n  * Cleans up any active subscriptions to prevent memory leaks.\n  */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n\n  /**\n  * Initializes the component.\n  *\n  * - subscribe to loggedIn status\n  */\n  ngOnInit(): void {\n    this.authService.isLoggedIn$()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.router.navigate(['/posts']);\n        },\n        error: () => {\n          this.serviceError = true;\n        }\n      });\n  }\n\n}\n\n    \n\n    \n        \n    \n        \n    \n    @if (!serviceError){\n    \n        \n            \n                Se connecter\n            \n            \n                S'inscrire\n            \n        \n    \n    }\n    @else {\n    \n        MDD application is not currently available\n    \n    }\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    @if (!serviceError){                                        Se connecter                                        S\\'inscrire                            }    @else {            MDD application is not currently available        }'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GreetingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LayoutComponent.html":{"url":"components/LayoutComponent.html","title":"component - LayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/layout/layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component displaying the menu layout of the application\n\nUse ScreenService to set isMobile flag used in template to manage the mobile and pc view\nUse AuthService to call logout method on logout\nUse Router and RouterLink for navigate operations\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-layout\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                            RouterLinkActive\n                            RouterLink\n                            MatSidenav\n                            MatSidenavContent\n                            MatSidenavContainer\n                            MatIcon\n                            NgClass\n                            MatNavList\n                            MatToolbar\n                            MatToolbarRow\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./layout.component.html\n            \n\n\n\n            \n                styleUrl\n                ./layout.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                isCollapsed\n                            \n                            \n                                isMobile\n                            \n                            \n                                    \n                                sidenav\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(screenService: ScreenService, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/layout/layout.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenService\n                                                  \n                                                        \n                                                                        ScreenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/layout/layout.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Logout and redirect the user to greeting page on logout\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/layout/layout.component.ts:42\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/layout/layout.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nget the isMobile status\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/layout/layout.component.ts:62\n                        \n                    \n\n\n            \n                \n                        Used to open the sidenav\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/layout/layout.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCollapsed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/layout/layout.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/layout/layout.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sidenav\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatSidenav\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatSidenav)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/layout/layout.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'material-responsive-sidenav'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/layout/layout.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { BreakpointObserver } from '@angular/cdk/layout';\nimport { NgClass } from '@angular/common';\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatNavList } from '@angular/material/list';\nimport { MatSidenav, MatSidenavContainer, MatSidenavContent } from '@angular/material/sidenav';\nimport { MatToolbar, MatToolbarRow } from '@angular/material/toolbar';\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { AuthService } from '../../core/services/auth.service';\nimport { Observable, Subject, takeUntil } from 'rxjs';\nimport { ScreenService } from 'app/core/services/screen.service';\n\n\n/**\n * Component displaying the menu layout of the application\n * @remark\n * - Use `ScreenService` to set isMobile flag used in template to manage the mobile and pc view\n * - Use `AuthService` to call logout method on logout\n * - Use `Router` and `RouterLink` for navigate operations\n * \n */\n@Component({\n  selector: 'app-layout',\n  imports: [RouterOutlet, RouterLinkActive, RouterLink, MatSidenav, MatSidenavContent, MatSidenavContainer, MatIcon, NgClass, MatNavList, MatToolbar, MatToolbarRow],\n  templateUrl: './layout.component.html',\n  styleUrl: './layout.component.scss'\n})\nexport class LayoutComponent implements OnInit, OnDestroy {\n  title = 'material-responsive-sidenav';\n  @ViewChild(MatSidenav)\n  sidenav!: MatSidenav;\n  isMobile = false;\n  isCollapsed = true;\n  private destroy$ = new Subject();\n\n  constructor(private screenService: ScreenService, private router: Router, private authService: AuthService) { }\n\n\n  /**\n   * Cleans up any active subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n\n  /**\n  * Initializes the component.\n  *\n  * - get the isMobile status\n  */\n  ngOnInit() {\n    this.screenService.isMobile$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(flag => this.isMobile = flag);\n  }\n\n  /**\n   * Used to open the sidenav\n   */\n  toggleMenu() {\n    if (this.isMobile) {\n      this.sidenav.toggle();\n      this.isCollapsed = false;\n    } else {\n      this.sidenav.open();\n      this.isCollapsed = !this.isCollapsed;\n    }\n  }\n  /**\n   * Logout and redirect the user to greeting page on logout\n   */\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/greeting']);\n  }\n\n\n}\n\n    \n\n    \n        @if (isMobile) {\n\n\n    \n        \n            @if (!isCollapsed) {\n            \n                Se déconnecter\n            \n            \n                Articles\n            \n            \n                Thèmes\n            \n            \n            \n                \n            \n            }\n        \n    \n    \n        \n            \n                \n                \n                    menu\n                \n            \n        \n        \n        \n    \n\n}\n\n@else {\n\n\n    \n        \n        \n        Se déconnecter\n        Articles\n        Thèmes\n        \n    \n\n\n\n\n    \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (isMobile) {                        @if (!isCollapsed) {                            Se déconnecter                                        Articles                                        Thèmes                                                                            }                                                                                        menu                                                        }@else {                            Se déconnecter        Articles        Thèmes                }'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/auth/login/login.component.ts\n\n\n\n    \n        Description\n    \n    \n        Displays the login page and enable the user to login.\n\nUses AuthService to submit de login request\nBuilds a reactive FormGroup with validation rules for identifier and password.\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            MatIcon\n                            MatFormFieldModule\n                            MatInputModule\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                isMobile\n                            \n                            \n                                loginForm\n                            \n                            \n                                    Public\n                                onError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(screenService: ScreenService, formBuilder: FormBuilder, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/feature/auth/login/login.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenService\n                                                  \n                                                        \n                                                                        ScreenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/login/login.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Build the form with its constraints\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/login/login.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/login/login.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nSets up a breakpoint observer to track the login screen\nBuild loginForm\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/login/login.component.ts:75\n                        \n                    \n\n\n            \n                \n                        Enable the user to login to the application\nSubmit the form by calling authService.login\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/login/login.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/login/login.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/login/login.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/login/login.component.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { LoginRequest } from '../../../core/interfaces/loginRequest.interface';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { CommonModule } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Subject, takeUntil } from 'rxjs';\nimport { ScreenService } from 'app/core/services/screen.service';\n\n/**\n * Displays the login page and enable the user to login.\n *\n * @remarks\n * - Uses `AuthService` to submit de login request\n * - Builds a reactive `FormGroup` with validation rules for identifier and password.\n */\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, MatIcon, MatFormFieldModule, MatInputModule, RouterLink],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss'\n})\n\n\n/**\n* Display a login page with a Reactive Form\n* \n*  @remarks\n*  - use AuthService to login the submited form\n*/\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  loginForm!: FormGroup;\n  isMobile = false;\n  public onError = false;\n  private destroy$ = new Subject();\n\n  constructor(private screenService: ScreenService, private formBuilder: FormBuilder, private router: Router, private authService: AuthService) { }\n\n  /**\n  * Cleans up any active subscriptions to prevent memory leaks.\n  */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * - Sets up a breakpoint observer to track the login screen\n   * - Build `loginForm`\n   */\n  ngOnInit(): void {\n\n    this.screenService.isMobile$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(flag => this.isMobile = flag);\n\n\n    this.buildForm();\n  }\n\n\n  /**\n  * Enable the user to login to the application \n  * Submit the form by calling authService.login\n  */\n  onSubmit() {\n    const LoginRequest = this.loginForm.value as LoginRequest;\n\n    this.authService.login(LoginRequest)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.router.navigate(['/posts']);\n        },\n        error: (err: any) => {\n          this.onError = true;\n        }\n\n      });\n  }\n\n  /**\n  * Build the form with its constraints\n  */\n  private buildForm() {\n    this.loginForm = this.formBuilder.group({\n      identifier: [\n        '',\n        [\n          Validators.required,\n        ]\n      ],\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.min(12)\n        ]\n      ]\n    });\n  }\n}\n\n    \n\n    \n        \n\n  \n  @if (isMobile){\n  \n    \n      arrow_back\n    \n  \n  \n  }\n\n  \n  @else{\n  \n    \n  \n  \n    arrow_back\n  \n  }\n\n\n  \n  Se connecter\n   -->\n  \n    E-mail ou nom d'utilisateur\n    \n      \n    \n    Mot de passe\n    \n\n      \n    \n    \n      Se connecter\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    @if (isMobile){            arrow_back          }    @else{              arrow_back    }    Se connecter   -->      E-mail ou nom d\\'utilisateur                  Mot de passe                        Se connecter      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginRequest.html":{"url":"interfaces/LoginRequest.html","title":"interface - LoginRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/loginRequest.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Request payload for user login.\nThis interface defines the shape of the data sent to the backend when\nlogging in.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            identifier\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        identifier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        identifier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginRequest {\n    identifier: string;\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/loginResponse.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Response shape for resdponse returned by the backend on login.\nThis interface is used to type the HTTP response received after a successful\nauthentication request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginResponse {\n    token: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MeComponent.html":{"url":"components/MeComponent.html","title":"component - MeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/user/component/me/me.component.ts\n\n\n\n    \n        Description\n    \n    \n        The component displays a page showing\n\nthe user informations like thier username, email with the possibility to change them plus password\n\ntheir subscriptions with the possibility to unsusbscribe from\n\nUses UserService to retrieve or update the user profile\n\nUses SubscriptionService to unsubscribe from a topic\n\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-me\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatFormFieldModule\n                            MatInputModule\n                            ReactiveFormsModule\n                            MatDividerModule\n                                TopicComponent\n                            MatIconModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./me.component.html\n            \n\n\n\n            \n                styleUrl\n                ./me.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                errorMessage\n                            \n                            \n                                topics$\n                            \n                            \n                                user\n                            \n                            \n                                userForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                    Private\n                                reloadSubscriptions\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, topicService: TopicService, fb: FormBuilder, subscriptionService: SubscriptionService, snack: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/feature/user/component/me/me.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subscriptionService\n                                                  \n                                                        \n                                                                        SubscriptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snack\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/user/component/me/me.component.ts:55\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/user/component/me/me.component.ts:65\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nget the topics\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/user/component/me/me.component.ts:87\n                        \n                    \n\n\n            \n                \n                        Used to update the user profile like their email, username or password.\nSubmit the form by calling userService.update\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reloadSubscriptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    reloadSubscriptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/user/component/me/me.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Used to reload the subscription list after any change on subscriptions\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe(topicId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/user/component/me/me.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Unsubscribe from the topic by its id and reload subscriptions then\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/user/component/me/me.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/user/component/me/me.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topics$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/user/component/me/me.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/user/component/me/me.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/user/component/me/me.component.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { User, UserUpdateRequest } from '../../../../core/interfaces/User.interface';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../../../core/services/auth.service';\nimport { UserService } from '../../../../core/services/user.service';\nimport { TopicService } from 'app/core/services/topic.service';\nimport { map, Observable, Subject, takeUntil } from 'rxjs';\nimport { Topic } from 'app/core/interfaces/topic.interface';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { TopicComponent } from \"../../../topics/topic/topic.component\";\nimport { SubscriptionService } from 'app/core/services/subscription.service';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n/**\n * The component displays a page showing\n * - the user informations like thier username, email with the possibility to change them plus password\n * - their subscriptions with the possibility to unsusbscribe from\n *\n * @remarks\n * - Uses `UserService` to retrieve or update the user profile\n * - Uses `SubscriptionService` to unsubscribe from a topic\n *\n */\n@Component({\n  selector: 'app-me',\n  standalone: true,\n  imports: [CommonModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule, MatDividerModule, TopicComponent, MatIconModule],\n  templateUrl: './me.component.html',\n  styleUrl: './me.component.scss'\n})\nexport class MeComponent implements OnInit, OnDestroy {\n\n  user: User | null = null;\n  errorMessage: string | null = null;\n  topics$!: Observable;\n  userForm!: FormGroup;\n  private destroy$ = new Subject();\n\n  constructor(\n    private userService: UserService,\n    private topicService: TopicService,\n    private fb: FormBuilder,\n    private subscriptionService: SubscriptionService,\n    private snack: MatSnackBar\n  ) { }\n\n  /**\n   * Cleans up any active subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n  * Initializes the component.\n  *\n  * - get the topics\n  */\n  ngOnInit(): void {\n    this.userService.getMe()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (data) => {\n          this.userForm = this.fb.group({\n            username: [data.username, [Validators.required, Validators.minLength(3)]],\n            email: [data.email, [Validators.required, Validators.email]],\n            password: ['']\n          });\n          this.reloadSubscriptions();\n        },\n        error: (err) => {\n          this.errorMessage = \"Error while getting infos\";\n        }\n      });\n  }\n\n  /**\n   * Used to update the user profile like their email, username or password.\n   * Submit the form by calling userService.update\n   */\n  onSubmit() {\n    if (this.userForm.invalid) {\n      this.userForm.markAllAsTouched();\n      return;\n    }\n    let userUpdate: UserUpdateRequest = this.userForm.value as UserUpdateRequest;\n    if (!userUpdate.password) {\n      delete userUpdate.password;\n    }\n    this.userService.update(userUpdate)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.snack.open(\"Profil utilisateur mis à jour avec succès\", \"Fermer\", { duration: 5000 });\n        },\n        error: (err: any) => {\n          this.snack.open(\"Erreur lors de la mise à jour du profil\", \"Fermer\", { duration: 5000 });\n        }\n      })\n  }\n\n  /**\n    * Used to reload the subscription list after any change on subscriptions\n    */\n  private reloadSubscriptions() {\n    this.topics$ = this.topicService.all().pipe(\n      takeUntil(this.destroy$),\n      map(topics => topics.filter(topic => topic.subscribed))\n    );\n  }\n\n  /**\n* Unsubscribe from the topic by its id and reload subscriptions then\n*/\n  unsubscribe(topicId: number) {\n    this.subscriptionService.unsubscribe(topicId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.reloadSubscriptions();\n        },\n        error: (err: any) => {\n          this.snack.open(\"Erreur lors de la suppression de l'abonnement\", \"Fermer\", { duration: 5000 });\n        }\n      });\n  }\n}\n\n    \n\n    \n         -->\n\n  Profil utilisateur\n\n\n@if (userForm){\n\n  \n    \n      \n    \n  \n  \n    \n      \n    \n  \n  \n    \n      Mot de passe\n      \n    \n  \n  \n    \n      Sauvegarder\n    \n  \n\n}\n\n\n\n  Abonnements\n\n\n  @for (topic of topics$ | async; track topic) {\n  \n    \n    \n  \n  }\n\n -->\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' -->  Profil utilisateur@if (userForm){                                                Mot de passe                        Sauvegarder      }  Abonnements  @for (topic of topics$ | async; track topic) {              } -->'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Post.html":{"url":"interfaces/Post.html","title":"interface - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a post entity with optional full details.\nThe id and comments fields are optional to accommodate summary vs. detailed payloads.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            comments\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            created_at\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            topic\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:         author\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         author\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        comments:         Comment[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Comment[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        created_at:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topic:         Topic\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Topic\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { author } from \"./author.interface\";\nimport { Comment } from \"./comment.interface\";\nimport { Topic } from \"./topic.interface\";\n\n/**\n * Represents a post entity with optional full details.\n *\n * The `id` and `comments` fields are optional to accommodate summary vs. detailed payloads.\n *\n * @property id? – Unique identifier of the post (undefined in creation requests).\n * @property title – Title of the post.\n * @property created_at – ISO timestamp string when the post was created.\n * @property author – The post’s author details.\n * @property topic – The topic to which this post belongs.\n * @property content? – Full content body of the post (absent in summary responses).\n * @property comments? – Array of associated comments when fetching detailed post info.\n *\n */\nexport interface Post {\n    id?: number;\n    title: string;\n    created_at: string;\n    author: author;\n    topic: Topic;\n    content?: string;\n    comments?: Comment[]\n}\n/**\n * Response shape for paginated post queries.\n *\n * @remarks\n * Mirrors the backend’s pageable response, including content and pagination metadata.\n *\n * @property content – Array of `Post` items for the current page.\n * @property pageable – Paging parameters (e.g., page number, size, sort).\n * @property totalElements – Total number of posts across all pages.\n * @property totalPages – Total number of available pages.\n *\n */\nexport interface PostResponse {\n    content: Post[];\n    pageable: any;\n    totalElements: number;\n    totalPages: number;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PostComponent.html":{"url":"components/PostComponent.html","title":"component - PostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/posts/post/post.component.ts\n\n\n\n    \n        Description\n    \n    \n        The component displays a a post card\n\n@Input to enable the Post value injection from PostsComponent\n\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-post\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                            DatePipe\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./post.component.html\n            \n\n\n\n            \n                styleUrl\n                ./post.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        post\n                    \n                \n                \n                    \n                        Type :         Post\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/feature/posts/post/post.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { DatePipe } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { RouterLink } from '@angular/router';\nimport { Post } from 'app/core/interfaces/post.interface';\n\n\n/**\n * The component displays a a post card\n *\n * @remarks\n * - @Input to enable the Post value injection from PostsComponent\n *\n */\n@Component({\n  selector: 'app-post',\n  imports: [MatCardModule, DatePipe, RouterLink],\n  templateUrl: './post.component.html',\n  styleUrl: './post.component.scss'\n})\nexport class PostComponent {\n  @Input() post!: Post;\n}\n\n    \n\n    \n        \n    \n        \n            {{ post.title }}\n        \n        \n             {{post.created_at | date: 'longDate'}} \n             {{post.author.username}}\n        \n    \n    \n        Description: {{ post.content }}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ post.title }}                             {{post.created_at | date: \\'longDate\\'}}              {{post.author.username}}                        Description: {{ post.content }}    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PostDetailsComponent.html":{"url":"components/PostDetailsComponent.html","title":"component - PostDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PostDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/posts/postdetails/postdetails.component.ts\n\n\n\n    \n        Description\n    \n    \n        Displays a detailed display of a post with a its comments and a comment form\n\nUses ActivatedRoute to get the active route param containing the post id\nUses PostService to get the expected post\nBuilds a reactive FormGroup with validation constraints for new comments\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-postdetails\n            \n\n\n            \n                imports\n                \n                            MatIconModule\n                            MatButtonModule\n                            MatCardModule\n                            MatDividerModule\n                            MatListModule\n                            DatePipe\n                            AsyncPipe\n                            RouterLink\n                            MatFormFieldModule\n                            MatInputModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./postdetails.component.html\n            \n\n\n\n            \n                styleUrl\n                ./postdetails.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentForm\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                post$\n                            \n                            \n                                postId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(postService: PostService, route: ActivatedRoute, fb: FormBuilder, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/feature/posts/postdetails/postdetails.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/postdetails/postdetails.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/postdetails/postdetails.component.ts:55\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nget the post id from active route\nget the post by its id\nbuild the comment form\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/postdetails/postdetails.component.ts:70\n                        \n                    \n\n\n            \n                \n                        Submit the form by calling postService.addComment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        commentForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/postdetails/postdetails.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/postdetails/postdetails.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/postdetails/postdetails.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/postdetails/postdetails.component.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { PostService } from 'app/core/services/post.service';\nimport { Observable, Subject, takeUntil } from 'rxjs';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { Post } from 'app/core/interfaces/post.interface';\nimport { AsyncPipe, DatePipe } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CommentRequest } from 'app/core/interfaces/commentRequest.interface';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n/**\n * Displays a detailed display of a post with a its comments and a comment form\n *\n * @remarks\n * - Uses `ActivatedRoute` to get the active route param containing the post id\n * - Uses `PostService` to get the expected post\n * - Builds a reactive `FormGroup` with validation constraints for new comments\n */\n@Component({\n  selector: 'app-postdetails',\n  imports: [MatIconModule, MatButtonModule, MatCardModule, MatDividerModule, MatListModule, DatePipe, AsyncPipe, RouterLink, MatFormFieldModule, MatInputModule, ReactiveFormsModule],\n  templateUrl: './postdetails.component.html',\n  styleUrl: './postdetails.component.scss'\n})\nexport class PostDetailsComponent implements OnInit, OnDestroy {\n  post$!: Observable;\n  commentForm!: FormGroup;\n  postId!: string | null;\n  private destroy$ = new Subject();\n\n  constructor(private postService: PostService, private route: ActivatedRoute, private fb: FormBuilder, private snackBar: MatSnackBar) { }\n\n  /**\n * Cleans up any active subscriptions to prevent memory leaks.\n */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n    * Initializes the component.\n    *\n    * - get the post id from active route\n    * - get the post by its id\n    * - build the comment form\n    */\n  ngOnInit(): void {\n    this.postId = this.route.snapshot.paramMap.get('id');\n\n    if (this.postId) {\n      this.post$ = this.postService.getPost(this.postId)\n        .pipe(takeUntil(this.destroy$));\n      this.commentForm = this.fb.group({\n        content: ['', [Validators.required, Validators.minLength(3)]]\n      });\n    }\n  }\n\n  /**\n  * Submit the form by calling postService.addComment\n  */\n  onSubmit() {\n    if (this.postId) {\n      const commentRequest: CommentRequest = this.commentForm.value as CommentRequest;\n      this.postService.addComment(this.postId, commentRequest)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (value) => {\n            this.post$ = this.postService.getPost(this.postId)\n              .pipe(takeUntil(this.destroy$));\n\n            this.commentForm.reset();\n          },\n          error: () => {\n            this.snackBar.open('Erreur lors de la création de l\\'article', 'Fermer', { duration: 5000 });\n\n          },\n        });\n    }\n\n\n  }\n}\n\n    \n\n    \n        \n    @if (post$ | async; as post){\n    \n        \n            \n                arrow_back\n            \n        \n        \n            {{post.title}}\n        \n    \n    \n        \n             {{post.created_at | date: 'longDate'}} \n             {{post.author.username}}\n             {{post.topic.name}}\n        \n        \n            Content: \n            {{post.content}}\n        \n    \n    \n    \n        Commentaires\n        @if (post.comments?.length){\n        @for (comment of post.comments; track comment) {\n        \n            {{ comment.author.username}}\n            \n                \n                    {{ comment.content }}\n                \n            \n        \n        }\n        }\n        \n            \n                \n            \n            \n                \n            \n        \n    \n    }\n    @else {\n    L'article n'a pas pu être récupéré.\n    }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    @if (post$ | async; as post){                                        arrow_back                                        {{post.title}}                                     {{post.created_at | date: \\'longDate\\'}}              {{post.author.username}}             {{post.topic.name}}                            Content:             {{post.content}}                            Commentaires        @if (post.comments?.length){        @for (comment of post.comments; track comment) {                    {{ comment.author.username}}                                                {{ comment.content }}                                            }        }                                                                                                        }    @else {    L\\'article n\\'a pas pu être récupéré.    }'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PostDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostRequest.html":{"url":"interfaces/PostRequest.html","title":"interface - PostRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/postRequest.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Request payload for post creation\nThis interface defines the shape of the data sent to the backend when\ncreating a new post\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            topicId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topicId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topicId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PostRequest {\n    topicId: number;\n    title: string;\n    content: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostResponse.html":{"url":"interfaces/PostResponse.html","title":"interface - PostResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/post.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Response shape for paginated post queries.\nMirrors the backend’s pageable response, including content and pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            pageable\n                                        \n                                \n                                \n                                        \n                                            totalElements\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         Post[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Post[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageable:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalElements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalElements:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { author } from \"./author.interface\";\nimport { Comment } from \"./comment.interface\";\nimport { Topic } from \"./topic.interface\";\n\n/**\n * Represents a post entity with optional full details.\n *\n * The `id` and `comments` fields are optional to accommodate summary vs. detailed payloads.\n *\n * @property id? – Unique identifier of the post (undefined in creation requests).\n * @property title – Title of the post.\n * @property created_at – ISO timestamp string when the post was created.\n * @property author – The post’s author details.\n * @property topic – The topic to which this post belongs.\n * @property content? – Full content body of the post (absent in summary responses).\n * @property comments? – Array of associated comments when fetching detailed post info.\n *\n */\nexport interface Post {\n    id?: number;\n    title: string;\n    created_at: string;\n    author: author;\n    topic: Topic;\n    content?: string;\n    comments?: Comment[]\n}\n/**\n * Response shape for paginated post queries.\n *\n * @remarks\n * Mirrors the backend’s pageable response, including content and pagination metadata.\n *\n * @property content – Array of `Post` items for the current page.\n * @property pageable – Paging parameters (e.g., page number, size, sort).\n * @property totalElements – Total number of posts across all pages.\n * @property totalPages – Total number of available pages.\n *\n */\nexport interface PostResponse {\n    content: Post[];\n    pageable: any;\n    totalElements: number;\n    totalPages: number;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/post.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling posts operations\nlike new post creation, new comment, or getting post informations\n\nUses Angular’s HttpClient to interact with /api/posts endpoints.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                pathService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                    Public\n                                all\n                            \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                getPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/post.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment(id: string, commentRequest: CommentRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/post.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Add a comment to the post given the post id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the post identifier\n\n                                            \n                                        \n                                        \n                                                commentRequest\n                                            \n                                                            CommentRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the comment\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                the Post object with its comments\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/post.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                an Observable that emits all posts in PostResponse object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(postRequest: PostRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/post.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Create a new post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postRequest\n                                            \n                                                            PostRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the new post to post to API\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                void\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPost\n                        \n                    \n                \n            \n            \n                \ngetPost(id: string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/post.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Get a post by its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the indentifier of the expected post\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        pathService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/posts'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/post.service.ts:22\n                        \n                    \n\n            \n                \n                    Base URL for post-related API calls.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Post, PostResponse } from '../interfaces/post.interface';\nimport { HttpClient } from '@angular/common/http';\nimport { PostRequest } from '../interfaces/postRequest.interface';\nimport { CommentRequest } from '../interfaces/commentRequest.interface';\n\n\n/**\n * Service responsible for handling posts operations\n * like new post creation, new comment, or getting post informations\n *\n * @remarks\n * - Uses Angular’s `HttpClient` to interact with `/api/posts` endpoints. \n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n\n  /** Base URL for post-related API calls. */\n  private pathService = 'api/posts';\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * \n   * @returns an Observable that emits all posts in PostResponse object\n   */\n  public all(): Observable {\n    return this.httpClient.get(this.pathService);\n  }\n\n  /**\n   * Create a new post\n   * @param postRequest the new post to post to API\n   * @returns void\n   */\n  public createPost(postRequest: PostRequest): Observable {\n    return this.httpClient.post(this.pathService, postRequest);\n  }\n\n  /**\n   * Get a post by its id\n   * @param id the indentifier of the expected post\n   * @returns \n   */\n  getPost(id: string | null): Observable {\n    return this.httpClient.get(`${this.pathService}/${id}`);\n  }\n  /**\n   * Add a comment to the post given the post id\n   * @param id the post identifier\n   * @param commentRequest the comment\n   * @returns the Post object with its comments\n   */\n  addComment(id: string, commentRequest: CommentRequest): Observable {\n    return this.httpClient.post(`${this.pathService}/${id}/comments/`, commentRequest);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PostsComponent.html":{"url":"components/PostsComponent.html","title":"component - PostsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PostsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/posts/main/posts.component.ts\n\n\n\n    \n        Description\n    \n    \n        The component displays a page with all posts related to subscribed topics.\n\nUses SubscriptionService to retrieve the user subscriptions\nUses PostService to retrieve posts\nBuild a filtered Observable from the two above Observable that contains the posts related to subscribed topics\n\nSee\n\nEven if the user is the author of a topic, the topic is not showing if the user has not subscribed to the topic\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-posts\n            \n\n\n            \n                imports\n                \n                            AsyncPipe\n                            RouterLink\n                            RouterModule\n                            MatCardModule\n                            MatButtonModule\n                            RouterLink\n                            MatIconModule\n                                PostComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./posts.component.html\n            \n\n\n\n            \n                styleUrl\n                ./posts.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                filteredPosts$\n                            \n                            \n                                isSortUp\n                            \n                            \n                                posts$\n                            \n                            \n                                subscriptions$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                flipSort\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                updateFilteredPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(postService: PostService, subscriptionService: SubscriptionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/feature/posts/main/posts.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subscriptionService\n                                                  \n                                                        \n                                                                        SubscriptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        flipSort\n                        \n                    \n                \n            \n            \n                \nflipSort()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/main/posts.component.ts:97\n                        \n                    \n\n\n            \n                \n                        flip the sortUp flag and rebuild the filtered post Observable\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/main/posts.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/main/posts.component.ts:62\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nget user subscriptions\nget all posts\nbuild the new Observable\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateFilteredPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateFilteredPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/posts/main/posts.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Join values emited from the two Observable on the topic id and return a new Observable sorted by date asc if sortUp and dsc else\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/main/posts.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredPosts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/main/posts.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSortUp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/main/posts.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/main/posts.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscriptions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/posts/main/posts.component.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { BehaviorSubject, combineLatest, filter, map, Observable, of, Subject, takeUntil } from 'rxjs';\nimport { Post } from '../../../core/interfaces/post.interface';\nimport { PostService } from '../../../core/services/post.service';\nimport { AsyncPipe, DatePipe } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { RouterLink, RouterModule } from '@angular/router';\nimport { MatIconModule } from '@angular/material/icon';\nimport { PostComponent } from '../post/post.component';\nimport { SubscriptionService } from 'app/core/services/subscription.service';\nimport { Subscription } from 'app/core/interfaces/subscription.interface';\n\n\n/**\n * The component displays a page with all posts related to subscribed topics.\n * \n *\n * @remarks\n * - Uses `SubscriptionService` to retrieve the user subscriptions\n * - Uses `PostService` to retrieve posts\n * - Build a filtered Observable from the two above Observable that contains the posts related to subscribed topics\n *\n * @see\n *  - Even if the user is the author of a topic, the topic is not showing if the user has not subscribed to the topic\n */\n@Component({\n  selector: 'app-posts',\n  imports: [AsyncPipe, RouterLink, RouterModule, MatCardModule, MatButtonModule, RouterLink, MatIconModule, PostComponent],\n  templateUrl: './posts.component.html',\n  styleUrl: './posts.component.scss'\n})\nexport class PostsComponent implements OnInit, OnDestroy {\n\n  isSortUp = true;\n  posts$!: Observable\n  filteredPosts$!: Observable\n  subscriptions$!: Observable;\n  private destroy$ = new Subject;\n\n\n  constructor(\n    private postService: PostService,\n    private subscriptionService: SubscriptionService\n  ) { }\n\n  /**\n  * Cleans up any active subscriptions to prevent memory leaks.\n  */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * - get user subscriptions\n   * - get all posts\n   * - build the new Observable\n   */\n  ngOnInit(): void {\n    this.subscriptions$ = this.subscriptionService.all()\n      .pipe(takeUntil(this.destroy$));\n\n    this.posts$ = this.postService.all().pipe(\n      takeUntil(this.destroy$),\n      map(res => res.content)\n    );\n    this.updateFilteredPosts();\n  }\n\n\n  /**\n   * Join values emited from the two Observable on the topic id and return a new Observable sorted by date asc if sortUp and dsc else\n   */\n  private updateFilteredPosts() {\n    this.filteredPosts$ = combineLatest([\n      this.posts$,\n      this.subscriptions$\n    ]).pipe(\n      map(([posts, subscriptions]) => {\n        const subscribedPost = new Set(subscriptions.map(s => s.topic_id));\n        const filtered = posts.filter(p => subscribedPost.has(p.topic.id));\n        return filtered.sort((a, b) => {\n          const dateA = new Date(a.created_at).getTime();\n          const dateB = new Date(b.created_at).getTime();\n          return this.isSortUp ? dateB - dateA : dateA - dateB;\n        });\n      })\n    );\n  }\n\n  /**\n   * flip the sortUp flag and rebuild the filtered post Observable\n   */\n  flipSort() {\n    this.isSortUp = !this.isSortUp;\n    this.updateFilteredPosts();\n  }\n\n\n}\n\n\n    \n\n    \n        \n    \n        \n            \n                Créer un article\n            \n        \n        \n            Trier par \n            \n                @if (isSortUp){\n                arrow_upward\n                }\n                @else {\n                arrow_downward\n                }\n            \n        \n    \n    \n        @for (post of filteredPosts$ | async; track post) {\n        \n            \n        \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        Créer un article                                        Trier par                             @if (isSortUp){                arrow_upward                }                @else {                arrow_downward                }                                    @for (post of filteredPosts$ | async; track post) {                                    }    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PostsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/auth/register/register.component.ts\n\n\n\n    \n        Description\n    \n    \n        Displays the register page.\n\nUses AuthService to submit the register request\nBuilds a reactive FormGroup with validation constraints\nUses MatSnackBar to popup the user on registration error\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            MatIconModule\n                            MatFormFieldModule\n                            MatInputModule\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n            \n                styleUrl\n                ./register.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                isMobile\n                            \n                            \n                                    Public\n                                onError\n                            \n                            \n                                registerForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(screenService: ScreenService, formBuilder: FormBuilder, router: Router, authService: AuthService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/feature/auth/register/register.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenService\n                                                  \n                                                        \n                                                                        ScreenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/register/register.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Build the form with its constraints\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/register/register.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/register/register.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nSets up a breakpoint observer to track the login screen\nBuild registerForm\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/auth/register/register.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Enable a new user to register to tje application\nSubmit the form by calling authService.register\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/register/register.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/register/register.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/register/register.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/auth/register/register.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { RegisterRequest } from 'app/core/interfaces/registerRequest.interface';\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ScreenService } from 'app/core/services/screen.service';\n\n/**\n * Displays the register page.\n *\n * @remarks\n * - Uses `AuthService` to submit the register request\n * - Builds a reactive `FormGroup` with validation constraints\n * - Uses `MatSnackBar` to popup the user on registration error\n */\n@Component({\n  selector: 'app-register',\n  imports: [CommonModule, ReactiveFormsModule, MatIconModule, MatFormFieldModule, MatInputModule, RouterLink],\n  templateUrl: './register.component.html',\n  styleUrl: './register.component.scss'\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  registerForm!: FormGroup;\n  isMobile = true;\n  public onError = false;\n  private destroy$ = new Subject();\n\n  constructor(private screenService: ScreenService, private formBuilder: FormBuilder, private router: Router, private authService: AuthService, private snackBar: MatSnackBar) {\n\n\n  }\n\n  /**\n  * Cleans up any active subscriptions to prevent memory leaks.\n  */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n  * Initializes the component.\n  *\n  * - Sets up a breakpoint observer to track the login screen\n  * - Build `registerForm`\n  */\n  ngOnInit(): void {\n\n    this.screenService.isMobile$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(flag => this.isMobile = flag);\n\n    this.buildForm();\n  }\n\n\n  /**\n  * Enable a new user to register to tje application\n  * Submit the form by calling authService.register\n  */\n  onSubmit() {\n\n    if (this.registerForm.invalid) {\n      this.registerForm.markAllAsTouched();\n      return;\n    }\n\n    const registerRequest = this.registerForm.value as RegisterRequest;\n\n    this.authService.register(registerRequest)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.router.navigate(['/login']);\n          this.snackBar.open('Compte créé!', 'Fermer', { duration: 5000 });\n        },\n        error: (err: any) => {\n          this.snackBar.open('Erreur lors de la création du compte!', 'Fermer', { duration: 5000 });\n        }\n      });\n  }\n\n  /**\n  * Build the form with its constraints\n  */\n  private buildForm() {\n    this.registerForm = this.formBuilder.group({\n      username: [\n        '',\n        [\n          Validators.required,\n        ]\n      ],\n      email: [\n        '',\n        [\n          Validators.required,\n          Validators.email,\n        ]\n      ],\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.min(8)\n        ]\n      ]\n    });\n  }\n\n}\n\n    \n\n    \n        \n\n    \n    @if (isMobile){\n    \n        \n            arrow_back\n        \n    \n    \n    }\n    \n    @else{\n    \n        \n    \n    \n        arrow_back\n    \n    }\n    \n    Inscription\n\n    \n        Nom d’utilisateur\n        \n            \n        \n        Adresse e-mail\n        \n            \n        \n        Mot de passe\n        \n            \n        \n        \n            S'inscrire\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        @if (isMobile){                        arrow_back                    }        @else{                            arrow_back        }        Inscription            Nom d’utilisateur                                    Adresse e-mail                                    Mot de passe                                                S\\'inscrire            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterRequest.html":{"url":"interfaces/RegisterRequest.html","title":"interface - RegisterRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/registerRequest.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Request payload for user register.\nThis interface defines the shape of the data sent to the backend when\nregistering in.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterRequest {\n    username: string;\n    email: string;\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenService.html":{"url":"injectables/ScreenService.html","title":"injectable - ScreenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScreenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/screen.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service used to centralize the screen configuration.\nUsed by any component that need to know the screen configuration i.e mobile or not mobile.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isMobile$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isMobile$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/screen.service.ts:14\n                        \n                    \n\n            \n                \n                    Emits true when viewport ≤ 800px, false otherwise\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Service used to centralize the screen configuration.\n * Used by any component that need to know the screen configuration i.e mobile or not mobile.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenService {\n\n  /** Emits true when viewport ≤ 800px, false otherwise */\n  public isMobile$ = new BehaviorSubject(false);\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subscription.html":{"url":"interfaces/Subscription.html","title":"interface - Subscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/subscription.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Response shape for response returned by the backend on subscriptions retrieve call.\n\nthe subscription link a user to a topic\ntopic_name is added by backend to avoid a second api call\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            topic_id\n                                        \n                                \n                                \n                                        \n                                            topic_name\n                                        \n                                \n                                \n                                        \n                                            user_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topic_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topic_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Subscription {\n    \"id\": number,\n    \"user_id\": number,\n    \"topic_id\": number,\n    \"topic_name\": string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscriptionService.html":{"url":"injectables/SubscriptionService.html","title":"injectable - SubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/subscription.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling subscription operations\nlike subscribing to a topic, unsubscribe from a topic or listing the user subscriptions\n\nUses Angular’s HttpClient to interact with /api/subscription endpoints.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                pathService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                all\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/subscription.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subscription.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Get the subscriptions\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                the subscriptions of the authenticated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subscription.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Subscribe to a topic given its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the topic identifier\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                an empty Observable\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsubscribe(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subscription.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Unsubscribe from a topic given its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the topic identifier\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                an empty Observable\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        pathService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/subscription'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/subscription.service.ts:20\n                        \n                    \n\n            \n                \n                    Base URL for subscription-related API calls.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subscription } from '../interfaces/subscription.interface';\n\n\n/**\n * Service responsible for handling subscription operations\n * like subscribing to a topic, unsubscribe from a topic or listing the user subscriptions\n *\n * @remarks\n * - Uses Angular’s `HttpClient` to interact with `/api/subscription` endpoints. \n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubscriptionService {\n\n  /** Base URL for subscription-related API calls. */\n  pathService = 'api/subscription'\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * Subscribe to a topic given its id\n   * @param id the topic identifier\n   * @returns an empty Observable \n   */\n  public subscribe(id: number): Observable {\n    return this.httpClient.post(`${this.pathService}/subscribe/${id}`, null);\n  }\n\n  /**\n   * Unsubscribe from a topic given its id\n   * @param id the topic identifier\n   * @returns an empty Observable \n   */\n  public unsubscribe(id: number): Observable {\n    return this.httpClient.delete(`${this.pathService}/unsubscribe/${id}`);\n  }\n\n  /**\n   * Get the subscriptions\n   * @returns the subscriptions of the authenticated user\n   */\n  public all(): Observable {\n    return this.httpClient.get('api/subscription');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Topic.html":{"url":"interfaces/Topic.html","title":"interface - Topic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/topic.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a topic or category that posts can belong to.\n\nThe subscribed flag indicates whether the current user is subscribed to this topic.\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            subscribed\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscribed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Topic {\n    id: number;\n    name: string;\n    description: string;\n    subscribed: boolean;\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TopicComponent.html":{"url":"components/TopicComponent.html","title":"component - TopicComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TopicComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/topics/topic/topic.component.ts\n\n\n\n    \n        Description\n    \n    \n        The component displays a topic card\n\n@Input topic to enable the topic value injection from TopicsComponent\n@Output subscribe and unsubscribe to send back a subscribe or unsubscribe event to the parent component\n\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-topic\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                            NgClass\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./topic.component.html\n            \n\n\n\n            \n                styleUrl\n                ./topic.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onToggleSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                topic\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                subscribe\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        topic\n                    \n                \n                \n                    \n                        Type :         Topic\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/feature/topics/topic/topic.component.ts:21\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        subscribe\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/feature/topics/topic/topic.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        unsubscribe\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/feature/topics/topic/topic.component.ts:24\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onToggleSubscription\n                        \n                    \n                \n            \n            \n                \nonToggleSubscription()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/topics/topic/topic.component.ts:31\n                        \n                    \n\n\n            \n                \n                        onToggleSubscription emit the topic id in the corresponding property.\nThe business is done into the Topics parent component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { NgClass, NgStyle } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { Topic } from 'app/core/interfaces/topic.interface';\n\n/**\n * The component displays a topic card\n *\n * @remarks\n * - @Input topic to enable the topic value injection from TopicsComponent\n * - @Output subscribe and unsubscribe to send back a subscribe or unsubscribe event to the parent component\n *\n */\n@Component({\n  selector: 'app-topic',\n  imports: [MatCardModule, NgClass],\n  templateUrl: './topic.component.html',\n  styleUrl: './topic.component.scss'\n})\nexport class TopicComponent {\n  @Input() topic!: Topic;\n\n  @Output() subscribe = new EventEmitter();\n  @Output() unsubscribe = new EventEmitter();\n\n\n  /**\n   * onToggleSubscription emit the topic id in the corresponding property.\n   * The business is done into the Topics parent component\n   */\n  onToggleSubscription() {\n    if (this.topic.subscribed) {\n      this.unsubscribe.emit(this.topic.id);\n    } else {\n      this.subscribe.emit(this.topic.id);\n    }\n  }\n\n}\n\n    \n\n    \n        \n    \n        \n            {{ topic.name }}\n        \n    \n    \n        Description: {{ topic.description }}\n    \n    \n        {{ topic.subscribed ? 'Se désabonner' : 'S’abonner' }}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ topic.name }}                        Description: {{ topic.description }}                {{ topic.subscribed ? \\'Se désabonner\\' : \\'S’abonner\\' }}    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TopicComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicService.html":{"url":"injectables/TopicService.html","title":"injectable - TopicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TopicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/topic.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling topic operations\nlike retrieving topics\n\nUses Angular’s HttpClient to interact with /api/topic endpoints.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                pathService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                all\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/topic.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/topic.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Get the topics\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                the topics available\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        pathService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/topic'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/topic.service.ts:18\n                        \n                    \n\n            \n                \n                    Base URL for topic-related API calls.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Topic } from '../interfaces/topic.interface';\nimport { Observable } from 'rxjs';\n\n/**\n * Service responsible for handling topic operations\n * like retrieving topics\n *\n * @remarks\n * - Uses Angular’s `HttpClient` to interact with `/api/topic` endpoints. \n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopicService {\n  /** Base URL for topic-related API calls. */\n  private pathService = 'api/topic';\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n    * Get the topics\n    * @returns the topics available\n    */\n  public all(): Observable {\n    return this.httpClient.get(this.pathService);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TopicsComponent.html":{"url":"components/TopicsComponent.html","title":"component - TopicsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TopicsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/feature/topics/main/topics.component.ts\n\n\n\n    \n        Description\n    \n    \n        The component displays a page showing all topics\n\nUses TopicService to retrieve the topics with a subscribed flag to know if user as subscribed or not\nUses SubscriptionService to subscribe or unsubscribe from a topic\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-post\n            \n\n\n            \n                imports\n                \n                            AsyncPipe\n                            MatCardModule\n                            MatButtonModule\n                                TopicComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./topics.component.html\n            \n\n\n\n            \n                styleUrl\n                ./topics.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                topics$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                reloadTopics\n                            \n                            \n                                    Protected\n                                subscribe\n                            \n                            \n                                    Protected\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(topicService: TopicService, subscriptionService: SubscriptionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/feature/topics/main/topics.component.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subscriptionService\n                                                  \n                                                        \n                                                                        SubscriptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/topics/main/topics.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Cleans up any active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/topics/main/topics.component.ts:42\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\nget the topics\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reloadTopics\n                        \n                    \n                \n            \n            \n                \n                        \n                    reloadTopics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/topics/main/topics.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Used to reload the topic list after any chnage on topics\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/topics/main/topics.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Subscribe to the topic by its id and reload topics then\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsubscribe(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/feature/topics/main/topics.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Unsubscribe from the topic by its id and reload topics then\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/topics/main/topics.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topics$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/feature/topics/main/topics.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AsyncPipe } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { TopicService } from 'app/core/services/topic.service';\nimport { SubscriptionService } from 'app/core/services/subscription.service';\nimport { TopicComponent } from \"../topic/topic.component\";\nimport { Observable, Subject, takeUntil } from 'rxjs';\nimport { Topic } from 'app/core/interfaces/topic.interface';\n\n/**\n * The component displays a page showing all topics\n *\n * @remarks\n * - Uses `TopicService` to retrieve the topics with a subscribed flag to know if user as subscribed or not\n * - Uses `SubscriptionService` to subscribe or unsubscribe from a topic\n *\n */\n@Component({\n  selector: 'app-post',\n  imports: [AsyncPipe, MatCardModule, MatButtonModule, TopicComponent],\n  templateUrl: './topics.component.html',\n  styleUrl: './topics.component.scss'\n})\nexport class TopicsComponent implements OnInit, OnDestroy {\n\n  topics$!: Observable;\n\n  private destroy$ = new Subject();\n\n  constructor(\n    private topicService: TopicService,\n    private subscriptionService: SubscriptionService,\n  ) { }\n\n\n  /**\n    * Initializes the component.\n    *\n    * - get the topics\n    */\n  ngOnInit(): void {\n    this.topics$ = this.topicService.all()\n      .pipe(takeUntil(this.destroy$));\n  }\n\n  /**\n  * Cleans up any active subscriptions to prevent memory leaks.\n  */\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n  * Subscribe to the topic by its id and reload topics then\n  */\n  protected subscribe(id: number): void {\n    this.subscriptionService.subscribe(id)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.reloadTopics();\n        },\n        error: (err: any) => {\n          console.log(\"topic.subscribe error\");\n        }\n      });\n  }\n\n  /**\n  * Unsubscribe from the topic by its id and reload topics then\n  */\n  protected unsubscribe(id: number): void {\n    this.subscriptionService.unsubscribe(id)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: () => {\n          this.reloadTopics();\n        },\n        error: (err: any) => {\n          console.log(\"topic.unsubscribe error\");\n        }\n      });\n  }\n\n  /**\n   * Used to reload the topic list after any chnage on topics\n   */\n  private reloadTopics(): void {\n    this.topics$ = this.topicService.all()\n      .pipe(takeUntil(this.destroy$));\n\n  }\n}\n\n    \n\n    \n        \n    @for (topic of topics$ | async; track topic) {\n    \n        \n        \n    \n    }\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    @for (topic of topics$ | async; track topic) {                            }'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreatepostComponent', 'selector': 'app-createpost'},{'name': 'GreetingComponent', 'selector': 'app-greeting-page'},{'name': 'LayoutComponent', 'selector': 'app-layout'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MeComponent', 'selector': 'app-me'},{'name': 'PostComponent', 'selector': 'app-post'},{'name': 'PostDetailsComponent', 'selector': 'app-postdetails'},{'name': 'PostsComponent', 'selector': 'app-posts'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'TopicComponent', 'selector': 'app-topic'},{'name': 'TopicsComponent', 'selector': 'app-post'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TopicsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/User.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Reprensent the user shape used when getting profile informations\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n    id: number;\n    username: string;\n    email: string;\n}\n\n/**\n * Request payload for cupdating user informations like username, email or password\n *\n *\n * @property username – the unique username\n * @property email -  the unique user email\n * @property email -  Optional password - If set, the backend will try to change it\n *\n */\nexport interface UserUpdateRequest {\n    username: string;\n    email: string;\n    password?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling authenticated user operations\nlike retrieving or updating their profile\n\nUses Angular’s HttpClient to interact with /api/user/me endpoints.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMe\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpclient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMe\n                        \n                    \n                \n            \n            \n                \ngetMe()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/user.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Get the user profile informations\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                an Observable that emits the User object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(userUpdate: UserUpdateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/user.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Update the user profile\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userUpdate\n                                            \n                                                            UserUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    containing the userinformations\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                an Observable that emits the modified User object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User, UserUpdateRequest } from '../interfaces/User.interface';\n\n\n/**\n * Service responsible for handling authenticated user operations\n * like retrieving or updating their profile\n *\n * @remarks\n * - Uses Angular’s `HttpClient` to interact with `/api/user/me` endpoints. \n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private httpclient: HttpClient) { }\n\n  /**\n   * Get the user profile informations\n   * @returns an Observable that emits the User object\n   */\n  getMe(): Observable {\n    return this.httpclient.get('/api/user/me');\n  }\n\n  /**\n   * Update the user profile\n   * @param userUpdate containing the userinformations\n   * @returns an Observable that emits the modified User object\n   */\n  update(userUpdate: UserUpdateRequest): Observable {\n    return this.httpclient.put('/api/user', userUpdate);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserUpdateRequest.html":{"url":"interfaces/UserUpdateRequest.html","title":"interface - UserUpdateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserUpdateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/User.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Request payload for cupdating user informations like username, email or password\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n    id: number;\n    username: string;\n    email: string;\n}\n\n/**\n * Request payload for cupdating user informations like username, email or password\n *\n *\n * @property username – the unique username\n * @property email -  the unique user email\n * @property email -  Optional password - If set, the backend will try to change it\n *\n */\nexport interface UserUpdateRequest {\n    username: string;\n    email: string;\n    password?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/author.html":{"url":"interfaces/author.html","title":"interface - author","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  author\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/author.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an author with a unique identifier and username.\nThis interface is used for data transfer (DTO) when working with posts,\ncomments, or any feature that needs author info.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface author {\n    \"id\": number,\n    \"username\": string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/User.interface.ts\n            \n            interface\n            User\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/User.interface.ts\n            \n            interface\n            UserUpdateRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/author.interface.ts\n            \n            interface\n            author\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/comment.interface.ts\n            \n            interface\n            Comment\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/commentRequest.interface.ts\n            \n            interface\n            CommentRequest\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/loginRequest.interface.ts\n            \n            interface\n            LoginRequest\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/loginResponse.interface.ts\n            \n            interface\n            LoginResponse\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/post.interface.ts\n            \n            interface\n            Post\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/post.interface.ts\n            \n            interface\n            PostResponse\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/postRequest.interface.ts\n            \n            interface\n            PostRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/registerRequest.interface.ts\n            \n            interface\n            RegisterRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/subscription.interface.ts\n            \n            interface\n            Subscription\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/topic.interface.ts\n            \n            interface\n            Topic\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/core/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/core/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app/core/services/screen.service.ts\n            \n            injectable\n            ScreenService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/core/services/subscription.service.ts\n            \n            injectable\n            SubscriptionService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/core/services/topic.service.ts\n            \n            injectable\n            TopicService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app/core/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app/feature/auth/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/app/feature/auth/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/app/feature/posts/createpost/createpost.component.ts\n            \n            component\n            CreatepostComponent\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/app/feature/posts/main/posts.component.ts\n            \n            component\n            PostsComponent\n            \n                45 %\n                (5/11)\n            \n        \n        \n            \n                \n                src/app/feature/posts/post/post.component.ts\n            \n            component\n            PostComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/feature/posts/postdetails/postdetails.component.ts\n            \n            component\n            PostDetailsComponent\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/app/feature/topics/main/topics.component.ts\n            \n            component\n            TopicsComponent\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/feature/topics/topic/topic.component.ts\n            \n            component\n            TopicComponent\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/app/feature/user/component/me/me.component.ts\n            \n            component\n            MeComponent\n            \n                50 %\n                (6/12)\n            \n        \n        \n            \n                \n                src/app/guards/auth.guards.ts\n            \n            guard\n            AuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/app/interceptors/auth.interceptor.ts\n            \n            function\n            authInterceptor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/shared/greeting-page/greeting-page.component.ts\n            \n            component\n            GreetingComponent\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/shared/layout/layout.component.ts\n            \n            component\n            LayoutComponent\n            \n                45 %\n                (5/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.4\n        \n            @angular/cdk : ^19.2.7\n        \n            @angular/common : ^19.2.4\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/forms : ^19.2.4\n        \n            @angular/material : ^19.2.7\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authInterceptor   (src/.../auth.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/interceptors/auth.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authInterceptor\n                        \n                    \n                \n            \n            \n                \nauthInterceptor(req: HttpRequest, next: HttpHandlerFn)\n                \n            \n\n\n\n\n            \n                \n                        HTTP interceptor function that attaches a Bearer token to outgoing API requests.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe outgoing HttpRequest.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandlerFn\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe next HttpHandlerFn in the chain.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                An Observable of the HttpEvent stream, forwarding either the original or cloned request.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMDD App front\nThe Frontend is based on Angular version  19.2.5.\nIt uses Angular Material as UI library.\nSetup\nPrerequisites\n\nNode.js v22.14\nNpm 11.2.x\nAngular 19.2.5\ngit clone git@github.com:jceintrey/yoga-app.git\n\nClone the repository\nExample :git clone git@github.com:jceintrey/mdd.git\n\nInstall the dependencies\n\n```bash\ncd front\nnpm iRunning the application\nTo run the whole application, consider the Backend should be started to make the front working as expected.\nExample :cd front\nnpm run startOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    12 Components\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [provideRouter(routes), provideHttpClient(withInterceptors([authInterceptor]))],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
